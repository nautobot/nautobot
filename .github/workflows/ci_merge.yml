---
# This CI process should be run on commit to the next, develop, or main branches.  This will be a complete
# test for all supported python version, running the tests in the corresponding docker containers (except linting).
# If these tests fail, yet the PR tests pass this would indicate a potential issue with the docker environments.
name: "CI - Merge"
on:
  # TODO Nick Change back Enabling pull_request temporarily for testing
  pull_request:  # 
  push:
    branches:
      - "main"
      - "develop"
      - "next"
    paths-ignore:
      - "nautobot/docs/**"
      - "examples/**"
      - "**.md"
      - "development/**"

jobs:
  black:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: black"
        run: "poetry run invoke black"
  flake8:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: flake8"
        run: "poetry run invoke flake8"
  hadolint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Run Hadolint"
        uses: "hadolint/hadolint-action@v1.6.0"
        with:
          dockerfile: "docker/Dockerfile"
  check-migrations:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Run check migrations"
        run: "poetry run invoke check-migrations"

  container-build:
    runs-on: "ubuntu-20.04"
    needs:
      - "black"
      - "flake8"
      - "hadolint"
      - "check-migrations"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9" ]
    env:
      INVOKE_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: "gitbranch"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build with cache"
        if: "github.ref != 'refs/heads/main'"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          load: true
          target: final
          file: "docker/Dockerfile"
          tags: "networktocode/nautobot-py${{ matrix.python-version }}:local"
          cache-from: "type=gha,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Build Dev Containers with cache"
        if: "github.ref != 'refs/heads/main'"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          load: true
          target: final-dev
          file: "docker/Dockerfile"
          tags: "networktocode/nautobot-dev-py${{ matrix.python-version }}:local"
          cache-from: "type=gha,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Build without cache"
        if: "github.ref == 'refs/heads/main'"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          load: true
          target: final
          file: "docker/Dockerfile"
          tags: "networktocode/nautobot-py${{ matrix.python-version }}:local"
          no-cache: true
          cache-to: "type=gha,mode=max,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Build Dev Containers without cache"
        if: "github.ref == 'refs/heads/main'"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          load: true
          target: final-dev
          file: "docker/Dockerfile"
          tags: "networktocode/nautobot-dev-py${{ matrix.python-version }}:local"
          no-cache: true
          cache-to: "type=gha,mode=max,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}

  tests-postgres:
    runs-on: "ubuntu-20.04"
    needs:
      - "container-build"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9" ]
    env:
      INVOKE_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: "gitbranch"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build Dev Containers from cache"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          load: true
          target: final-dev
          file: "docker/Dockerfile"
          tags: "networktocode/nautobot-dev-py${{ matrix.python-version }}:local"
          cache-from: "type=gha,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Run unittest"
        run: "poetry run invoke unittest --failfast --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"

  tests-mysql:
    runs-on: "ubuntu-20.04"
    needs:
      - "container-build"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9" ]
    env:
      INVOKE_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
      NAUTOBOT_DB_USER: "root"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_HOST: "127.0.0.1"
      NAUTOBOT_DB_PORT: "3306"
      NAUTOBOT_DB_ENGINE: "django.db.backends.mysql"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: "gitbranch"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build Dev Containers from cache"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          load: true
          target: final-dev
          file: "docker/Dockerfile"
          tags: "networktocode/nautobot-dev-py${{ matrix.python-version }}:local"
          cache-from: "type=gha,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - run: "cp invoke.mysql.yml invoke.yml"
      - name: "Run unittest"
        run: "poetry run invoke unittest --failfast --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"

  integration-test:
    runs-on: "ubuntu-20.04"
    needs:
      # TODO: Nick should we let unittests and integration tests run in parallel or should we do unittests first?  For now we just need this to run
      - "container-build"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9" ]
    env:
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_REDIS_PASSWORD: "decinablesprewad"
      NAUTOBOT_SELENIUM_HOST: "nautobot"
      INVOKE_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
      redis:
        image: "redis:6-alpine"
        ports:
          - "6379:6379"
      selenium:
        image: "selenium/standalone-firefox:latest"
        ports:
          - "4444:4444"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: "gitbranch"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build Prod Containers from cache"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          load: true
          target: final
          file: "docker/Dockerfile"
          tags: "networktocode/nautobot-py${{ matrix.python-version }}:local"
          cache-from: "type=gha,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ matrix.python-version }}-${{ steps.gitbranch.outputs.branch }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - run: "cp invoke.integration_tests.yml invoke.yml"
      - name: "Start Nautobot"
        run: "poetry run invoke start"
      - name: "Wait for Nautobot"
        run: timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080)" != "200" ]]; do echo Waiting...; sleep 5; done'
      - name: "Run Integration Tests"
        # If NAUTOBOT_SELENIUM_URL is set to 'localhost' or '127.0.0.1' the connection does not work
        run: "INVOKE_NAUTOBOT_LOCAL=True NAUTOBOT_SELENIUM_URL=http://$(hostname -f):4444/wd/hub poetry run invoke integration-test --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"

  # container-push:
  #   runs-on: "ubuntu-20.04"
  #   if: "github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/next')"
  #   needs:
  #     - "integration-test"
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       python-version: [ "3.6", "3.7", "3.8", "3.9" ]
  #   env:
  #     INVOKE_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: "gitbranch"
  #     - name: "Set up Docker Buildx"
  #       uses: "docker/setup-buildx-action@v1"
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: "Docker Metadata"
  #       id: "dockermeta"
  #       uses: "docker/metadata-action@v3"
  #       with:
  #         images: "ghcr.io/nautobot/nautobot"
  #         flavor: |
  #           latest=false
  #         tags: |
  #           type=raw,value={{branch}}-py${{ matrix.python-version }}
  #           type=raw,value={{branch}}-{{sha}}-{{date 'X'}}-py${{ matrix.python-version }}
  #           type=raw,value={{branch}},enable=${{ matrix.python-version == 3.6 }}
  #           type=raw,value={{branch}}-{{sha}}-{{date 'X'}},enable=${{ matrix.python-version == 3.6 }}
  #           type=raw,value=latest,enable=${{ matrix.python-version == 3.6 && github.ref == 'refs/heads/develop' }}
  #           type=raw,value=latest-py${{ matrix.python-version }},enable=${{ github.ref == 'refs/heads/develop' }}
  #     - name: "Build"
  #       uses: "docker/build-push-action@v2"
  #       with:
  #         push: true
  #         target: final
  #         file: "docker/Dockerfile"
  #         tags: "${{ steps.dockermeta.outputs.tags }}"
  #         cache-from: "type=gha,scope=nautobot-${{ steps.gitbranch.outputs.branch }}"
  #         cache-to: "type=gha,mode=max,scope=nautobot-${{ steps.gitbranch.outputs.branch }}"
  #         context: "."
  #         build-args: |
  #           PYTHON_VER=${{ matrix.python-version }}
  #     - name: "Docker Dev Metadata"
  #       id: "dockerdevmeta"
  #       uses: "docker/metadata-action@v3"
  #       with:
  #         images: "ghcr.io/nautobot/nautobot-dev"
  #         flavor: |
  #           latest=false
  #         tags: |
  #           type=raw,value={{branch}}-py${{ matrix.python-version }}
  #           type=raw,value={{branch}}-{{sha}}-{{date 'X'}}-py${{ matrix.python-version }}
  #           type=raw,value={{branch}},enable=${{ matrix.python-version == 3.6 }}
  #           type=raw,value={{branch}}-{{sha}}-{{date 'X'}},enable=${{ matrix.python-version == 3.6 }}
  #           type=raw,value=latest,enable=${{ matrix.python-version == 3.6 && github.ref == 'refs/heads/develop' }}
  #           type=raw,value=latest-py${{ matrix.python-version }},enable=${{ github.ref == 'refs/heads/develop' }}
  #     - name: "Build Dev Containers"
  #       uses: "docker/build-push-action@v2"
  #       with:
  #         push: true
  #         target: final-dev
  #         file: "docker/Dockerfile"
  #         tags: "${{ steps.dockerdevmeta.outputs.tags }}"
  #         cache-from: "type=gha,scope=nautobot-${{ steps.gitbranch.outputs.branch }}"
  #         cache-to: "type=gha,mode=max,scope=nautobot-${{ steps.gitbranch.outputs.branch }}"
  #         context: "."
  #         build-args: |
  #           PYTHON_VER=${{ matrix.python-version }}