---
name: "CI"
on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]
jobs:
  Linting:
    runs-on: "ubuntu-latest"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      # ----------------------------------------------
      #       check-out repo and set-up python
      # ----------------------------------------------
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: 3.9
      # ----------------------------------------------
      #        load pip cache if cache exists
      # ----------------------------------------------
      - uses: "actions/cache@v2"
        with:
          path: "~/.cache/pip"
          key: "${{ runner.os }}-pip"
          restore-keys: "${{ runner.os }}-pip"
      # ----------------------------------------------
      #          install and run linters
      # ----------------------------------------------
      - run: "python -m pip install --upgrade pip wheel"
      - run: "python -m pip install invoke black=='20.8b1' flake8=='3.9.2'"  # Until there is a poetry install --dev-only (poetry 1.2) install the linting tools here to speed up this step
      - name: Setup Hadolint
        run: |
          mkdir -p $HOME/.local/bin
          curl -Lo $HOME/.local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.0.0/hadolint-Linux-x86_64
          chmod +x $HOME/.local/bin/hadolint
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - run: "invoke tests --lint-only"

  Test:
    needs: Linting
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest"]
        python-version: [ "3.6", "3.7", "3.8", "3.9" ]
        db: ["postgresql", "mysql"]
    env:
      INVOKE_NAUTOBOT_PYTHON_VER: ${{ matrix.python-version }}
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_SELENIUM_URL: http://localhost:4444/wd/hub 
      NAUTOBOT_SELENIUM_HOST: 172.18.0.1
      NAUTOBOT_DB_PASSWORD: decinablesprewad
      NAUTOBOT_DB_USER: nautobot
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_USER: nautobot
          MYSQL_PASSWORD: decinablesprewad
          MYSQL_DATABASE: nautobot
        ports:
          - 3306:3306
        options: >-
          --health-cmd mysqladmin ping -h localhost
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        # Docker Hub image
        image: postgres:13
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: decinablesprewad
          POSTGRES_DB: nautobot
          POSTGRES_USER: nautobot
          NAUTOBOT_DB_ENGINE: django.db.backends.${{ matrix.db }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      selenium:
        image: selenium/standalone-firefox:latest
        ports:
          - 4444:4444
    # The type of runner that the job will run on
    runs-on: "${{ matrix.os }}"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: "actions/checkout@v2"
      # ----------------------------------------------
      # Setup Python
      # ----------------------------------------------
      - uses: "actions/setup-python@v2"
        with:
          python-version: ${{ matrix.python-version }}
      # ----------------------------------------------
      # install & configure poetry
      # ----------------------------------------------
      - name: "Install Poetry"
        uses: "snok/install-poetry@v1.1.6"
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      # ----------------------------------------------
      # load cached venv if cache exists
      # ----------------------------------------------
      - name: "Load cached venv"
        id: "cached-poetry-dependencies"
        uses: "actions/cache@v2"
        with:
          path: ".venv"
          key: "venv-${{ runner.os }}--${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}"
      # ----------------------------------------------
      # install dependencies if cache does not exist
      # ----------------------------------------------
      - name: "Install dependencies"
        if: "steps.cached-poetry-dependencies.outputs.cache-hit != 'true'"
        run: "poetry install --no-interaction --no-root"
      - name: Install Nautobot
        run: poetry install --no-interaction
      - name: Check migrations
        if: matrix.python-version == '3.6'
        run: poetry run invoke check-migrations
      - name: Unit Tests
        run: poetry run invoke unittest --failfast --keepdb
      - name: Integration Tests
        env:
          NAUTOBOT_INTEGRATION_TEST: True
        run: poetry run invoke integration-test --failfast --keepdb --append
      - name: Coverage
        run: poetry run invoke unittest-coverage