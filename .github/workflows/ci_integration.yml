---
# Full CI for commits to the integration branches (main, develop, next)
name: "CI - Integration Branch"
on:  # yamllint disable
  push:
    branches:
      - "main"
      - "develop"
      - "next"
  workflow_call:

jobs:
  black:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: black"
        run: "poetry run invoke black"
  flake8:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: flake8"
        run: "poetry run invoke flake8"
  markdownlint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Linting: markdownlint"
        uses: "nosborn/github-action-markdown-cli@v3.0.1"
        with:
          config_file: ".markdownlint.yml"
          files: "nautobot examples *.md"
          ignore_files: "nautobot/project-static"
          rules: "scripts/use-relative-md-links.js"
  hadolint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Run Hadolint"
        uses: "hadolint/hadolint-action@v1.6.0"
        with:
          dockerfile: "docker/Dockerfile"
  check-migrations:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Run check migrations"
        run: "poetry run invoke check-migrations"
    needs:
      - "black"
      - "flake8"
      - "markdownlint"
      - "hadolint"
  check-schema:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
      NAUTOBOT_CONFIG: "nautobot/core/tests/nautobot_config.py"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Run check-schema"
        # REST API schema generation currently includes GraphQL schema generation, which is dependent on the DB :-(
        run: "poetry run invoke migrate check-schema"
    needs:
      - "black"
      - "flake8"
      - "markdownlint"
      - "hadolint"

  pylint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
      NAUTOBOT_CONFIG: "nautobot/core/tests/nautobot_config.py"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Run pylint"
        run: "poetry run invoke pylint"
    needs:
      - "check-migrations"
      - "check-schema"

  tests-postgres:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
      redis:
        image: "redis:6-alpine"
        ports:
          - "6379:6379"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Remove Installed Nautobots (Poetry Workaround)" # Workaround for https://github.com/python-poetry/poetry/issues/2918
        run: "for i in $(ls -d1 ~/.cache/pypoetry/virtualenvs/*/lib/*/site-packages/nautobot-*.dist-info); do poetry run pip uninstall -y nautobot; done"
      - name: "Reinstall Nautobot Local"
        run: "poetry install"
      - name: "Run unittest"
        run: "poetry run invoke unittest --failfast --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"
    needs:
      - "check-migrations"
      - "check-schema"

  tests-mysql:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "root"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_HOST: "127.0.0.1"
      NAUTOBOT_DB_PORT: "3306"
      NAUTOBOT_DB_ENGINE: "django.db.backends.mysql"
    services:
      mysql:
        image: "mysql:8"
        env:
          MYSQL_ROOT_PASSWORD: "decinablesprewad"
          MYSQL_PASSWORD: "decinablesprewad"
          MYSQL_DATABASE: "nautobot"
        ports:
          - "3306:3306"
      redis:
        image: "redis:6-alpine"
        ports:
          - "6379:6379"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Remove Installed Nautobots (Poetry Workaround)" # Workaround for https://github.com/python-poetry/poetry/issues/2918
        run: "for i in $(ls -d1 ~/.cache/pypoetry/virtualenvs/*/lib/*/site-packages/nautobot-*.dist-info); do poetry run pip uninstall -y nautobot; done"
      - name: "Reinstall Nautobot Local"
        run: "poetry install"
      - name: "Install Required Dependencies for MySql Client"
        run: "sudo apt-get update && sudo apt-get install --no-install-recommends -y default-libmysqlclient-dev gcc"
      - name: "Install MySql Dependencies"
        run: "poetry install --no-interaction --no-root --extras mysql"
      - name: "Run unittest"
        run: "poetry run invoke unittest --failfast --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"
    needs:
      - "check-migrations"
      - "check-schema"

  integration-test:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
      NAUTOBOT_SELENIUM_URL: "http://localhost:4444/wd/hub"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
      redis:
        image: "redis:6-alpine"
        ports:
          - "6379:6379"
      selenium:
        image: "selenium/standalone-firefox:4.1.2"
        ports:
          - "4444:4444"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Remove Installed Nautobots (Poetry Workaround)" # Workaround for https://github.com/python-poetry/poetry/issues/2918
        run: "for i in $(ls -d1 ~/.cache/pypoetry/virtualenvs/*/lib/*/site-packages/nautobot-*.dist-info); do poetry run pip uninstall -y nautobot; done"
      - name: "Reinstall Nautobot Local"
        run: "poetry install"
      - name: "Run Integration Tests"
        # If NAUTOBOT_SELENIUM_HOST is set to 'localhost' or '127.0.0.1' the connection does not work
        run: "NAUTOBOT_SELENIUM_HOST=`hostname -f` poetry run invoke integration-test --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"
    needs:
      - "pylint"
      - "tests-postgres"
      - "tests-mysql"

  container-build:
    runs-on: "ubuntu-20.04"
    if: "github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/next')"
    needs:
      - "integration-test"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]
    env:
      INVOKE_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: "gitbranch"
      - run: echo "##[set-output name=version;]$(egrep -m1 'file.*pyuwsgi-' poetry.lock | cut -f2 -d-)"
        id: "pyuwsgi"
      - name: "Set up QEMU"
        uses: "docker/setup-qemu-action@v1"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Docker Metadata"
        id: "dockermeta"
        uses: "docker/metadata-action@v3"
        with:
          images: "ghcr.io/nautobot/nautobot"
          flavor: |
            latest=false
          tags: |
            type=raw,value={{branch}}-py${{ matrix.python-version }}
            type=raw,value={{branch}}-{{sha}}-{{date 'X'}}-py${{ matrix.python-version }}
            type=raw,value={{branch}},enable=${{ matrix.python-version == 3.7 }}
            type=raw,value={{branch}}-{{sha}}-{{date 'X'}},enable=${{ matrix.python-version == 3.7 }}
            type=raw,value=latest,enable=${{ matrix.python-version == 3.7 && github.ref == 'refs/heads/develop' }}
            type=raw,value=latest-py${{ matrix.python-version }},enable=${{ github.ref == 'refs/heads/develop' }}
          labels: |
            org.opencontainers.image.title=Nautobot
      - name: "Build"
        uses: "docker/build-push-action@v2"
        with:
          push: true
          target: final
          file: "docker/Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          tags: "${{ steps.dockermeta.outputs.tags }}"
          labels: "${{ steps.dockermeta.outputs.labels }}"
          cache-from: "type=gha,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
            PYUWSGI_VER=${{ steps.pyuwsgi.outputs.version }}
            POETRY_PARALLEL=true
      - name: "Docker Dev Metadata"
        id: "dockerdevmeta"
        uses: "docker/metadata-action@v3"
        with:
          images: "ghcr.io/nautobot/nautobot-dev"
          flavor: |
            latest=false
          tags: |
            type=raw,value={{branch}}-py${{ matrix.python-version }}
            type=raw,value={{branch}}-{{sha}}-{{date 'X'}}-py${{ matrix.python-version }}
            type=raw,value={{branch}},enable=${{ matrix.python-version == 3.7 }}
            type=raw,value={{branch}}-{{sha}}-{{date 'X'}},enable=${{ matrix.python-version == 3.7 }}
            type=raw,value=latest,enable=${{ matrix.python-version == 3.7 && github.ref == 'refs/heads/develop' }}
            type=raw,value=latest-py${{ matrix.python-version }},enable=${{ github.ref == 'refs/heads/develop' }}
          labels: |
            org.opencontainers.image.title=Nautobot
      - name: "Build Dev Containers"
        uses: "docker/build-push-action@v2"
        with:
          push: true
          target: final-dev
          file: "docker/Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          tags: "${{ steps.dockerdevmeta.outputs.tags }}"
          labels: "${{ steps.dockerdevmeta.outputs.labels }}"
          cache-from: "type=gha,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
            PYUWSGI_VER=${{ steps.pyuwsgi.outputs.version }}
            POETRY_PARALLEL=true
