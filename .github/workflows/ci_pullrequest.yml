---
# A lighter-weight version of CI specifically for pull requests
name: "CI - Pull Request"
concurrency:  # Cancel any existing runs of this workflow for this same PR
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true
on:  # yamllint disable
  pull_request:
  workflow_call:

jobs:
  linters:
    uses: "./.github/workflows/shared_linters.yml"
  check-migrations:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django_prometheus.db.backends.postgresql"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Run check migrations"
        run: "poetry run invoke check-migrations"
  check-schema:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django_prometheus.db.backends.postgresql"
      NAUTOBOT_CONFIG: "nautobot/core/tests/nautobot_config.py"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Run check-schema"
        # REST API schema generation currently includes GraphQL schema generation, which is dependent on the DB :-(
        run: "poetry run invoke migrate check-schema"
  tests-ui:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Install NPM Dependencies"
        working-directory: ./nautobot/ui
        run: "npm install"
      - name: "Setup base aliases for tests"
        working-directory: ./nautobot/ui
        run: "mkdir generated && cp src/file_templates/jsconfig-base.json generated/jsconfig.paths.json"
      - name: "Setup base app_imports for mock"
        working-directory: ./nautobot/ui
        run: "echo 'export const NautobotApps = {}; export default NautobotApps;' > generated/app_imports.js"
      - name: "Run unittest-ui"
        working-directory: ./nautobot/ui
        run: "poetry run invoke unittest-ui"
    needs:
      - "prettier"
      - "eslint"
  migration-tests-mysql:
    runs-on: "ubuntu-20.04"
    env:
      MIGRATION_TEST_DATASET: "development/datasets/nautobot_1.5.16_mysql.tar.gz"
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_CONFIG: "nautobot/core/tests/nautobot_config.py"
      NAUTOBOT_DB_USER: "root"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_HOST: "127.0.0.1"
      NAUTOBOT_DB_PORT: "3306"
      NAUTOBOT_DB_ENGINE: "django_prometheus.db.backends.mysql"
    services:
      mysql:
        image: "mysql:8"
        env:
          MYSQL_ROOT_PASSWORD: "decinablesprewad"
          MYSQL_PASSWORD: "decinablesprewad"
          MYSQL_DATABASE: "nautobot"
        ports:
          - "3306:3306"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "3.8"
      - name: "Remove Installed Nautobots (Poetry Workaround)" # Workaround for https://github.com/python-poetry/poetry/issues/2918
        run: "for i in $(ls -d1 ~/.cache/pypoetry/virtualenvs/*/lib/*/site-packages/nautobot-*.dist-info); do poetry run pip uninstall -y nautobot; done"
      - name: "Reinstall Nautobot Local"
        run: "poetry install"
      - name: "Install Required Dependencies for MySql Client"
        run: "sudo apt-get update && sudo apt-get install --no-install-recommends -y default-libmysqlclient-dev gcc"
      - name: "Install MySql Dependencies"
        run: "poetry install --no-interaction --no-root --extras mysql"
      - name: "Run migration test"
        run: "poetry run invoke migration-test --db-engine mysql --dataset $MIGRATION_TEST_DATASET"
    needs:
      - "linters"
      - "check-migrations"
      - "check-schema"
  migration-tests-postgres:
    runs-on: "ubuntu-20.04"
    env:
      MIGRATION_TEST_DATASET: "development/datasets/nautobot_1.5.16_postgres.tar.gz"
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_CONFIG: "nautobot/core/tests/nautobot_config.py"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django_prometheus.db.backends.postgresql"
      PGPASSWORD: "decinablesprewad"
    services:
      postgres:
        image: "postgres:13-alpine"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "3.10"
      - name: "Remove Installed Nautobots (Poetry Workaround)" # Workaround for https://github.com/python-poetry/poetry/issues/2918
        run: "for i in $(ls -d1 ~/.cache/pypoetry/virtualenvs/*/lib/*/site-packages/nautobot-*.dist-info); do poetry run pip uninstall -y nautobot; done"
      - name: "Reinstall Nautobot Local"
        run: "poetry install"
      - name: "Run migration test"
        run: "poetry run invoke migration-test --db-engine postgres --dataset $MIGRATION_TEST_DATASET"
    needs:
      - "linters"
      - "check-migrations"
      - "check-schema"
  tests-matrix:
    strategy:
      fail-fast: true
      matrix:
        workflow:
          - "./.github/workflows/shared_integration_test.yml"
          - "./.github/workflows/shared_unit_test_mysql.yml"
          - "./.github/workflows/shared_unit_test_postgres.yml"
    uses: "${{ matrix.workflow }}"
    needs:
      - "linters"
      - "check-migrations"
      - "check-schema"
  changelog:
    if: contains(fromJson('["develop","next","develop-1.6"]'), github.base_ref)
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: "0"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Check for changelog entry"
        run: |
          git fetch --no-tags origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
          poetry run towncrier check --compare-with origin/${{ github.base_ref }}
  container-build-test:
    name: "Test Container Build"
    runs-on: "ubuntu-22.04"
    needs:
      - "linters"
      - "check-migrations"
      - "check-schema"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: "Set up QEMU"
        uses: "docker/setup-qemu-action@v2"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v2"
      - name: "Login to GitHub Container Registry"
        uses: "docker/login-action@v2"
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"
      - name: "Build `final`"
        uses: "./.github/actions/build-nautobot-image"
        with:
          branch: "${{ github.head_ref }}"
          image: "ghcr.io/nautobot/nautobot"
          platforms: "linux/amd64"
          push: "false"
          python-version: "3.11"
          tag-latest: "false"
          tag-latest-for-branch: "false"
          tag-latest-for-py: "false"
          target: "final"
  all-tests-passed:
    runs-on: "ubuntu-20.04"
    steps:
      - run: "echo 'All tests succeeded'"
    needs:
      - "container-build-test"
      - "migration-tests-mysql"
      - "migration-tests-postgres"
      - "pylint"
      - "tests-matrix"
      - "tests-ui"
