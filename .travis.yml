---
# Linting available at https://config.travis-ci.com/explore
_setup_docker: &setup_docker
  before_install:
    - sudo rm -rf /var/lib/apt/lists/*
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
    - mkdir -vp ~/.docker/cli-plugins/
    - curl --silent -L "https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker version
    - pip install invoke docker-compose requests
    - echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
    - sudo service docker restart
    - docker buildx create --use

_unit_test: &unit_test
  python: "3.9"
  <<: *setup_docker
  before_script:
    - invoke buildx
  script:
    - invoke unittest || travis_terminate 1
    - invoke unittest-coverage

_integration_test: &integration_test
  python: "3.9"
  <<: *setup_docker
  before_script:
    - invoke buildx --target final --tag networktocode/nautobot:local
  script:
    - invoke integration-tests

_publish: &publish
  python: "3.9"
  <<: *setup_docker
  before_script:
    - invoke buildx --target final --tag networktocode/nautobot:local
    - docker images
    - echo Sign into docker hub
    # - echo echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin || travis_terminate 1
    - echo Sign into Github Container Registry
    # - echo echo $GHCR_ACCESS_TOKEN | docker login ghcr.io -u $GHCR_USERNAME --password-stdin || travis_terminate 1

_publish_develop: &publish_develop
  script:
    - export COMMIT_DATE_TAG=develop-${TRAVIS_COMMIT:0:7}-$(date +%s)
    - 'echo Using tag: ${COMMIT_DATE_TAG}'
    - docker tag networktocode/nautobot:local networktocode/nautobot:latest-dev
    - docker tag networktocode/nautobot:local networktocode/nautobot:${COMMIT_DATE_TAG}
    - docker tag networktocode/nautobot:local ghcr.io/nautobot/nautobot:latest-dev
    - docker tag networktocode/nautobot:local ghcr.io/nautobot/nautobot:${COMMIT_DATE_TAG}
    - echo Pushing images
    - echo docker push networktocode/nautobot:latest-dev
    - echo docker push networktocode/nautobot:${COMMIT_DATE_TAG}
    - echo docker push ghcr.io/nautobot/nautobot:latest-dev
    - echo docker push ghcr.io/nautobot/nautobot:${COMMIT_DATE_TAG}
    - docker images

_publish_main: &publish_main
  script:
    - docker tag networktocode/nautobot:local networktocode/nautobot:latest
    - docker tag networktocode/nautobot:local networktocode/nautobot:${COMMIT_DATE_TAG}
    - docker tag networktocode/nautobot:local ghcr.io/nautobot/nautobot:latest-dev
    - docker tag networktocode/nautobot:local ghcr.io/nautobot/nautobot:${COMMIT_DATE_TAG}
    - echo Pushing images
    - echo docker push networktocode/nautobot:latest-dev
    - echo docker push networktocode/nautobot:${COMMIT_DATE_TAG}
    - echo docker push ghcr.io/nautobot/nautobot:latest-dev
    - echo docker push ghcr.io/nautobot/nautobot:${COMMIT_DATE_TAG}
    - docker images

os: linux
dist: focal
language: python
cache:
  directories:
    - /home/travis/.cache/docker
jobs:
  include:
    - stage: Linting
      python: "3.9"  # 3.9 for performance gains over 3.6
      install:
        - pip install invoke black flake8 requests  # really should use poetry to install but there is no poetry install --dev-only (hopefully in 1.1.6 https://github.com/python-poetry/poetry/commit/d2485b8f849f0bbfd8f6933b625ea07f11f80615)
        - curl -Lo /home/travis/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.0.0/hadolint-Linux-x86_64
        - chmod +x /home/travis/bin/hadolint
        - mkdir -p /home/travis/.cache/docker
      script:
        - invoke black --local
        - invoke flake8 --local
        - invoke hadolint --local

    # Unfortunately we can't do travis matrix builds in multiple stages so we get to define each build here
    - stage: Unit Test
      name: Python 3.6 Unit Test
      env:
        - PYTHON_VER=3.6
      <<: *unit_test
    - name: Python 3.7 Unit Test
      env:
        - PYTHON_VER=3.7
      <<: *unit_test
    - name: Python 3.8 Unit Test
      env:
        - PYTHON_VER=3.8
      <<: *unit_test
    - name: Python 3.9 Unit Test
      env:
        - PYTHON_VER=3.9
      <<: *unit_test


    - stage: Integration Tests
      name: Python 3.6 Integration Tests
      env:
        - OVERRIDE_FILENAME=docker-compose.build.yml
        - PYTHON_VER=3.6
      <<: *integration_test
    - name: Python 3.7 Integration Tests
      env:
        - OVERRIDE_FILENAME=docker-compose.build.yml
        - PYTHON_VER=3.7
      <<: *integration_test
    - name: Python 3.8 Integration Tests
      env:
        - OVERRIDE_FILENAME=docker-compose.build.yml
        - PYTHON_VER=3.8
      <<: *integration_test
    - name: Python 3.9 Integration Tests
      env:
        - OVERRIDE_FILENAME=docker-compose.build.yml
        - PYTHON_VER=3.9
      <<: *integration_test

    - stage: Publish Docker Image (Develop)
      if: branch = develop #AND type = push
      env:
        - OVERRIDE_FILENAME=docker-compose.build.yml
        - PYTHON_VER=3.6
      <<: *publish
      <<: *publish_develop

    - stage: Publish Docker Image (Main)
      if: branch = develop #AND type = push  should be main but testing
      env:
        - OVERRIDE_FILENAME=docker-compose.build.yml
        - PYTHON_VER=3.6
      <<: *publish
      <<: *publish_main

  allow_failures:
    - env: PYTHON_VER=3.9
