---
version: "3.9"
volumes:
  media_root:
services:
  nautobot:
    build:
      args:
        PYTHON_VER: "${PYTHON_VER}"
      context: ../
      dockerfile: docker/Dockerfile
      target: dev
    image: "local/nautobot-dev:local-py${PYTHON_VER}"
    ports:
      - "8080:8080"
    volumes:
      - media_root:/opt/nautobot/media
    depends_on:
      redis:
        condition: service_started
      selenium:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - dev.env
    tty: true
    healthcheck:
      interval: 5s
      timeout: 5s
      start_period: 5m  # it takes a WHILE to run initial migrations with an empty DB
      retries: 3
      test:
        - "CMD"
        - "curl"
        - "-f"
        - "http://localhost:8080/health/"
  celery_worker:
    image: "local/nautobot-dev:local-py${PYTHON_VER}"
    ports:
      - "8081:8080"
    volumes:
      - media_root:/opt/nautobot/media
    entrypoint: "watchmedo auto-restart --directory './' --pattern '*.py' --recursive -- nautobot-server celery worker -l INFO --events"
    healthcheck:
      interval: 60s
      timeout: 30s
      start_period: 30s
      retries: 3
      test:
        - "CMD"
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$$HOSTNAME"
    depends_on:
      nautobot:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./dev.env
    tty: true
  celery_beat:
    image: "local/nautobot-dev:local-py${PYTHON_VER}"
    entrypoint: "nautobot-server celery beat -l INFO"
    healthcheck:
      disable: true
    #   interval: 5s
    #   timeout: 5s
    #   start_period: 5s
    #   retries: 3
    #   test: ["CMD", "nautobot-server", "health_check"]
    depends_on:
      nautobot:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./dev.env
    tty: true
  redis:
    image: redis:6-alpine
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file:
      - dev.env
  selenium:
    image: selenium/standalone-firefox:4.9.1
    ports:
        - "4444:4444"
        - "15900:5900"
    shm_size: 2g
  mkdocs:
    profiles:
      - mkdocs
    image: "local/nautobot-dev:local-py${PYTHON_VER}"
    entrypoint: "mkdocs serve -a '0.0.0.0:8001'"
    healthcheck:
      disable: true
    tty: true
    ports:
      - "8001:8001"
