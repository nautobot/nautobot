# Generated by Django 4.2.15 on 2024-10-05 21:20

import uuid

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion

import nautobot.core.models.fields
import nautobot.extras.models.mixins


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("tenancy", "0009_update_all_charfields_max_length_to_255"),
        ("dcim", "0062_module_data_migration"),
        ("ipam", "0047_alter_ipaddress_role_alter_ipaddress_status_and_more"),
        ("extras", "0116_task_queue_to_job_queue_migration"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccessPointGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                (
                    "controller",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="access_point_groups",
                        to="dcim.controller",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="WirelessNetwork",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("ssid", models.CharField(max_length=255)),
                ("mode", models.CharField(max_length=255)),
                ("enabled", models.BooleanField(default=True)),
                ("authentication", models.CharField(max_length=255)),
                ("hidden", models.BooleanField(default=False)),
                (
                    "secrets_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="wireless_networks",
                        to="extras.secretsgroup",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="wireless_networks",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SupportedDataRate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("standard", models.CharField(max_length=255)),
                ("rate", models.PositiveIntegerField()),
                ("mcs_index", models.IntegerField(blank=True, null=True)),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ["standard", "rate"],
                "unique_together": {("standard", "rate")},
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="RadioProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("frequency", models.CharField(blank=True, max_length=255)),
                ("tx_power_min", models.IntegerField(blank=True, null=True)),
                ("tx_power_max", models.IntegerField(blank=True, null=True)),
                (
                    "channel_width",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.IntegerField(), blank=True, null=True),
                ),
                (
                    "allowed_channel_list",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.IntegerField(), blank=True, null=True),
                ),
                ("regulatory_domain", models.CharField(max_length=255)),
                ("rx_power_min", models.IntegerField(blank=True, null=True)),
                (
                    "supported_data_rates",
                    models.ManyToManyField(blank=True, related_name="radio_profiles", to="wireless.supporteddatarate"),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="AccessPointGroupWirelessNetworkAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "access_point_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wireless_network_assignments",
                        to="wireless.accesspointgroup",
                    ),
                ),
                (
                    "vlan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="access_point_group_wireless_network_assignments",
                        to="ipam.vlan",
                    ),
                ),
                (
                    "wireless_network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_point_group_assignments",
                        to="wireless.wirelessnetwork",
                    ),
                ),
            ],
            options={
                "ordering": ["access_point_group", "wireless_network"],
                "unique_together": {("access_point_group", "wireless_network")},
            },
        ),
        migrations.CreateModel(
            name="AccessPointGroupRadioProfileAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "access_point_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="radio_profile_assignments",
                        to="wireless.accesspointgroup",
                    ),
                ),
                (
                    "radio_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_point_group_assignments",
                        to="wireless.radioprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["access_point_group", "radio_profile"],
                "unique_together": {("access_point_group", "radio_profile")},
            },
        ),
        migrations.AddField(
            model_name="accesspointgroup",
            name="radio_profiles",
            field=models.ManyToManyField(
                blank=True,
                related_name="access_point_groups",
                through="wireless.AccessPointGroupRadioProfileAssignment",
                to="wireless.radioprofile",
            ),
        ),
        migrations.AddField(
            model_name="accesspointgroup",
            name="tags",
            field=nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="accesspointgroup",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="access_point_groups",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="accesspointgroup",
            name="wireless_networks",
            field=models.ManyToManyField(
                blank=True,
                related_name="access_point_groups",
                through="wireless.AccessPointGroupWirelessNetworkAssignment",
                to="wireless.wirelessnetwork",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="accesspointgroup",
            unique_together={("name", "controller")},
        ),
    ]
