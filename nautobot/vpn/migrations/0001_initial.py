# Generated by Django 4.2.20 on 2025-05-16 14:42

import uuid

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion

import nautobot.core.models.fields
import nautobot.extras.models.mixins
import nautobot.extras.models.roles
import nautobot.extras.models.statuses


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("dcim", "0069_softwareimagefile_external_integration"),
        ("ipam", "0051_added_optional_vrf_relationship_to_vdc"),
        ("tenancy", "0009_update_all_charfields_max_length_to_255"),
        ("extras", "0122_add_graphqlquery_owner_content_type"),
    ]

    operations = [
        migrations.CreateModel(
            name="VPN",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("vpn_id", models.CharField(blank=True, max_length=255)),
                (
                    "role",
                    nautobot.extras.models.roles.RoleField(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="extras.role"
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpns",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "VPN",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VPNPhase1Policy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("ike_version", models.CharField(blank=True, max_length=255)),
                ("aggressive_mode", models.BooleanField(default=False)),
                (
                    "encryption_algorithm",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.CharField(), blank=True, null=True),
                ),
                (
                    "integrity_algorithm",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.CharField(), blank=True, null=True),
                ),
                (
                    "dh_group",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.CharField(), blank=True, null=True),
                ),
                ("lifetime_seconds", models.PositiveIntegerField(blank=True, null=True)),
                ("lifetime_kb", models.PositiveIntegerField(blank=True, null=True)),
                ("authentication_method", models.CharField(blank=True, max_length=255)),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_phase_1_policies",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "VPN Phase 1 Policy",
                "verbose_name_plural": "VPN Phase 1 Policies",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VPNPhase2Policy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                (
                    "encryption_algorithm",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.CharField(), blank=True, null=True),
                ),
                (
                    "integrity_algorithm",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.CharField(), blank=True, null=True),
                ),
                (
                    "pfs_group",
                    nautobot.core.models.fields.JSONArrayField(base_field=models.CharField(), blank=True, null=True),
                ),
                ("lifetime", models.PositiveIntegerField(blank=True, null=True)),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_phase_2_policies",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "VPN Phase 2 Policy",
                "verbose_name_plural": "VPN Phase 2 Policies",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VPNProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("keepalive_enabled", models.BooleanField(default=False)),
                ("keepalive_interval", models.PositiveIntegerField(blank=True, null=True)),
                ("keepalive_retries", models.PositiveIntegerField(blank=True, null=True)),
                ("nat_traversal", models.BooleanField(default=False)),
                ("extra_options", models.JSONField(blank=True, null=True)),
                (
                    "role",
                    nautobot.extras.models.roles.RoleField(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="extras.role"
                    ),
                ),
                (
                    "secrets_group",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_profiles",
                        to="extras.secretsgroup",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_profiles",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "VPN Profile",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VPNTunnelEndpoint",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("source_fqdn", models.CharField(blank=True, max_length=255)),
                (
                    "device",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vpn_tunnel_endpoints",
                        to="dcim.device",
                    ),
                ),
                (
                    "protected_prefixes",
                    models.ManyToManyField(blank=True, related_name="vpn_tunnel_endpoints", to="ipam.prefix"),
                ),
                (
                    "protected_prefixes_dg",
                    models.ManyToManyField(blank=True, related_name="vpn_tunnel_endpoints", to="extras.dynamicgroup"),
                ),
                (
                    "role",
                    nautobot.extras.models.roles.RoleField(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="extras.role"
                    ),
                ),
                (
                    "source_interface",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vpn_tunnel_endpoints_src_int",
                        to="dcim.interface",
                    ),
                ),
                (
                    "source_ipaddress",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_tunnel_endpoints_src_ip",
                        to="ipam.ipaddress",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_tunnel_endpoints",
                        to="tenancy.tenant",
                    ),
                ),
                (
                    "tunnel_interface",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_tunnel_endpoints_tunnel",
                        to="dcim.interface",
                    ),
                ),
                (
                    "vpn_profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vpn_tunnel_endpoints",
                        to="vpn.vpnprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "VPN Tunnel Endpoint",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VPNTunnel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("tunnel_id", models.CharField(blank=True, max_length=255)),
                ("encapsulation", models.CharField(blank=True, max_length=255)),
                (
                    "endpoint_a",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="endpoint_a_vpn_tunnels",
                        to="vpn.vpntunnelendpoint",
                    ),
                ),
                (
                    "endpoint_z",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="endpoint_z_vpn_tunnels",
                        to="vpn.vpntunnelendpoint",
                    ),
                ),
                (
                    "role",
                    nautobot.extras.models.roles.RoleField(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="extras.role"
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        on_delete=django.db.models.deletion.PROTECT, to="extras.status"
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vpn_tunnels",
                        to="tenancy.tenant",
                    ),
                ),
                (
                    "vpn",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vpn_tunnels",
                        to="vpn.vpn",
                    ),
                ),
                (
                    "vpn_profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vpn_tunnels",
                        to="vpn.vpnprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "VPN Tunnel",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VPNProfilePhase2PolicyAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveIntegerField(default=100)),
                (
                    "vpn_phase2_policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vpn_profile_phase2_policy_assignments",
                        to="vpn.vpnphase2policy",
                    ),
                ),
                (
                    "vpn_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vpn_profile_phase2_policy_assignments",
                        to="vpn.vpnprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["weight", "vpn_profile", "vpn_phase2_policy"],
                "unique_together": {("vpn_profile", "vpn_phase2_policy")},
            },
        ),
        migrations.CreateModel(
            name="VPNProfilePhase1PolicyAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveIntegerField(default=100)),
                (
                    "vpn_phase1_policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vpn_profile_phase1_policy_assignments",
                        to="vpn.vpnphase1policy",
                    ),
                ),
                (
                    "vpn_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vpn_profile_phase1_policy_assignments",
                        to="vpn.vpnprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["weight", "vpn_profile", "vpn_phase1_policy"],
                "unique_together": {("vpn_profile", "vpn_phase1_policy")},
            },
        ),
        migrations.AddField(
            model_name="vpnprofile",
            name="vpn_phase1_policies",
            field=models.ManyToManyField(
                blank=True,
                related_name="vpn_profiles",
                through="vpn.VPNProfilePhase1PolicyAssignment",
                to="vpn.vpnphase1policy",
            ),
        ),
        migrations.AddField(
            model_name="vpnprofile",
            name="vpn_phase2_policies",
            field=models.ManyToManyField(
                blank=True,
                related_name="vpn_profiles",
                through="vpn.VPNProfilePhase2PolicyAssignment",
                to="vpn.vpnphase2policy",
            ),
        ),
        migrations.AddField(
            model_name="vpn",
            name="vpn_profile",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="vpns",
                to="vpn.vpnprofile",
            ),
        ),
    ]
