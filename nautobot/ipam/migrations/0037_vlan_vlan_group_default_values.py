# Generated by Django 3.2.18 on 2023-06-07 16:31

from django.db import migrations

from nautobot.ipam.utils.migrations import increment_names_of_records_with_similar_names


DEFAULT_VLAN_GROUP_BASENAME = "Default VLAN Group"


def vlan_vlan_group_uniqueness_constrains_revise(apps, schema_editor):
    # Resolve VLAN-Group name uniqueness
    VLAN = apps.get_model("ipam", "vlan")
    VLANGroup = apps.get_model("ipam", "vlangroup")

    increment_names_of_records_with_similar_names(VLANGroup)

    vlans_without_vlan_groups = VLAN.objects.filter(vlan_group__isnull=True)
    vlans_to_update = []
    counter = 1
    for vlan in vlans_without_vlan_groups:
        while True:
            created, vlan_group = VLANGroup.objects.get_or_create(
                name=f"{DEFAULT_VLAN_GROUP_BASENAME} {counter}", defaults={"location": vlan.location}
            )
            if created or vlan_group.location == vlan.location:
                vlan.vlan_group = vlan_group
                vlans_to_update.append(vlan)
                continue
            counter += 1
    VLAN.objects.bulk_update(vlans_to_update, ["vlan_group"])


def revert_vlan_vlan_group_uniqueness_constrains_revise(apps, schema_editor):
    VLAN = apps.get_model("ipam", "vlan")
    VLANGroup = apps.get_model("ipam", "vlangroup")

    # TODO(timizuo): Find a way to revert changes made to VLAN and VLANGroup
    # Revert changes made to VLAN
    # Reverting changes made to VLAN Group might be tricky


class Migration(migrations.Migration):
    dependencies = [
        ("ipam", "0036_add_uniqueness_constraints_to_service"),
    ]

    operations = [
        migrations.RunPython(
            vlan_vlan_group_uniqueness_constrains_revise, revert_vlan_vlan_group_uniqueness_constrains_revise
        )
    ]
