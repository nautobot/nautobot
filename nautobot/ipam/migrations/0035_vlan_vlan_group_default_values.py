# Generated by Django 3.2.18 on 2023-06-07 16:31

from django.db import migrations, models


def increment_names_of_records_with_similar_names(model: models.Model):
    """
    This function increments the names of records with similar names in a given model.
    """
    duplicate_records = (
        model.objects.values("name").order_by("name").annotate(name_count=models.Count("name")).filter(name_count__gt=1)
    )
    records_to_update = []

    for duplicate_record in duplicate_records:
        records = model.objects.filter(name=duplicate_record["name"])[1:]
        for idx, record in enumerate(records):
            # Starting from 2 e.g Example Name 2, Example Name 3
            record.name = f"{record.name} {idx + 2}"
            records_to_update.append(record)
    model.objects.bulk_update(records_to_update, ["name"])


def vlan_vlan_group_uniqueness_constrains_revise(apps, schema_editor):
    # Resolve VLAN-Group name uniqueness
    VLAN = apps.get_model("ipam", "vlan")
    VLANGroup = apps.get_model("ipam", "vlangroup")

    increment_names_of_records_with_similar_names(VLANGroup)

    # Hope fully vlan group with name `Default VLAN Group` would not exist
    default_vlan_group = VLANGroup.objects.create(name="Default VLAN Group")
    VLAN.objects.filter(vlan_group__isnull=True).update(vlan_group=default_vlan_group)


def revert_vlan_vlan_group_uniqueness_constrains_revise(apps, schema_editor):
    VLAN = apps.get_model("ipam", "vlan")
    VLANGroup = apps.get_model("ipam", "vlangroup")

    # Revert changes made to vlan
    default_vlan_group = VLANGroup.objects.get(name="Default VLAN Group")
    VLAN.objects.filter(vlan_group=default_vlan_group).update(vlan_group=None)
    default_vlan_group.delete()

    # Reverting changes made to VLAN Group might be tricky


class Migration(migrations.Migration):
    dependencies = [
        ("dcim", "0043_status_nonnullable"),
        ("ipam", "0034_status_nonnullable"),
    ]

    operations = [
        migrations.RunPython(
            vlan_vlan_group_uniqueness_constrains_revise, revert_vlan_vlan_group_uniqueness_constrains_revise
        )
    ]
