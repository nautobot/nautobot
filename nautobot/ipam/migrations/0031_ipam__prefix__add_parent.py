# Generated by Django 3.2.18 on 2023-03-22 16:10

from django.db import migrations, models


import nautobot.ipam.utils.migrations
import nautobot.ipam.choices


def reverse_it(apps, schema_editor):
    """Reverse Namespace migrations."""
    Namespace = apps.get_model("ipam", "Namespace")
    VRF = apps.get_model("ipam", "VRF")
    VRFDeviceAssignment = apps.get_model("ipam", "VRFDeviceAssignment")
    IPAddress = apps.get_model("ipam", "IPAddress")
    Prefix = apps.get_model("ipam", "Prefix")
    Interface = apps.get_model("dcim", "Interface")
    VMInterface = apps.get_model("virtualization", "VMInterface")

    ns_global = Namespace.objects.get(name="Global")
    Prefix.objects.update(namespace=ns_global)
    VRF.objects.update(namespace=ns_global)
    Namespace.objects.exclude(name=ns_global.name).delete()

    # Reset VRF-to-device/VM assignments.
    VRFDeviceAssignment.objects.all().delete()

    # Clear vrf from [VM]Interface objects.
    Interface.objects.update(vrf=None)
    VMInterface.objects.update(vrf=None)

    # Clear parenting.
    IPAddress.objects.update(parent=None, ip_version=None)
    Prefix.objects.update(parent=None, ip_version=None)

    # Remove objects created by migrations.
    Prefix.objects.filter(description__startswith="Created by Nautobot").delete()
    for vrf in VRF.objects.filter(description__startswith="Created by Nautobot"):
        original_vrf = (
            VRF.objects.exclude(description__startswith="Created by Nautobot")
            .filter(name=vrf.name, rd=vrf.rd, tenant=vrf.tenant)
            .first()
        )
        Prefix.objects.filter(vrf=vrf).update(vrf=original_vrf)
        vrf.delete()


def migrate_ipaddress_status_to_type(apps, schema_editor):
    """Migrate IPAddress.status DHCP/SLAAC to types."""
    Status = apps.get_model("extras", "Status")
    IPAddress = apps.get_model("ipam", "IPAddress")
    ContentType = apps.get_model("contenttypes", "ContentType")

    ipaddress_ct = ContentType.objects.get_for_model(IPAddress)
    statuses = Status.objects.filter(content_types=ipaddress_ct)
    status_migrated, _ = statuses.get_or_create(
        name="Migrated",
        defaults={
            "color": "ff0000",
            "description": "DHCP/SLAAC status replaced with `type` of same name by Nautobot 2.0 data migrations.",
        },
    )

    # Update all objects of status=DHCP to type=DHCP & status=Migrated.
    if "test" not in sys.argv:
        print(">>> Migrating IPAddresses with status DHCP to type DHCP...")
    IPAddress.objects.filter(status__name="DHCP").update(
        type=nautobot.ipam.choices.IPAddressTypeChoices.TYPE_DHCP,
        status=status_migrated,
    )

    # Update all objects of status=SLAAC to type=SLAAC & status=Migrated.
    if "test" not in sys.argv:
        print(">>> Migrating IPAddresses with status SLAAC to type SLAAC...")
    IPAddress.objects.filter(status__name="SLAAC").update(
        type=nautobot.ipam.choices.IPAddressTypeChoices.TYPE_SLAAC,
        status=status_migrated,
    )

    # Delete the legacy status objects.
    print(">>> Deleting Status DHCP")
    try:
        Status.objects.filter(name="DHCP").delete()
    except models.ProtectedError:
        pass

    print(">>> Deleting Status SLAAC")
    try:
        Status.objects.filter(name="SLAAC").delete()
    except models.ProtectedError:
        pass


def revert_ipaddress_type_to_status(apps, schema_editor):
    """Revert IPAddress.type DHCP/SLAAC to status."""
    Status = apps.get_model("extras", "Status")
    IPAddress = apps.get_model("ipam", "IPAddress")
    ContentType = apps.get_model("contenttypes", "ContentType")

    ipaddress_ct = ContentType.objects.get_for_model(IPAddress)

    # Recreate the DHCP/SLAAC statuses.
    status_dhcp, _ = Status.objects.get_or_create(
        name="DHCP", defaults={"color": "4caf50", "description": "Dynamically assigned IPv4/IPv6 address"}
    )
    status_dhcp.content_types.add(ipaddress_ct)
    status_slaac, _ = Status.objects.get_or_create(
        name="SLAAC", defaults={"color": "4caf50", "description": "Dynamically assigned IPv6 address"}
    )
    status_slaac.content_types.add(ipaddress_ct)

    # Revert type back to status.
    IPAddress.objects.filter(type=nautobot.ipam.choices.IPAddressTypeChoices.TYPE_DHCP).update(status=status_dhcp)
    IPAddress.objects.filter(type=nautobot.ipam.choices.IPAddressTypeChoices.TYPE_SLAAC).update(status=status_slaac)
    IPAddress.objects.update(type=None)


class Migration(migrations.Migration):
    dependencies = [
        ("ipam", "0030_ipam__namespaces"),
        ("dcim", "0041_ipam__namespaces"),
        ("virtualization", "0023_ipam__namespaces"),
    ]

    operations = [
        migrations.RunPython(
            code=nautobot.ipam.utils.migrations.process_namespaces,
            reverse_code=reverse_it,
        ),
        migrations.RunPython(
            code=migrate_ipaddress_status_to_type,
            reverse_code=revert_ipaddress_type_to_status,
        ),
    ]
