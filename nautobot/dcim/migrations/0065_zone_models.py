# Generated by Django 4.2.16 on 2024-10-18 04:37

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('ipam', '0050_vlangroup_range_and_tags'),
        ('tenancy', '0009_update_all_charfields_max_length_to_255'),
        ('extras', '0119_remove_task_queues_from_job_and_queue_from_scheduled_job'),
        ('dcim', '0064_virtualdevicecontext_status_data_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZoneVRFAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('vrf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_assignments', to='ipam.vrf')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vrf_assignments', to='dcim.zone')),
            ],
            options={
                'ordering': ['zone', 'vrf'],
                'unique_together': {('zone', 'vrf')},
            },
        ),
        migrations.CreateModel(
            name='ZoneVLANAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('vlan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_assignments', to='ipam.vlan')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vlan_assignments', to='dcim.zone')),
            ],
            options={
                'ordering': ['zone', 'vlan'],
                'unique_together': {('zone', 'vlan')},
            },
        ),
        migrations.CreateModel(
            name='ZoneType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZonePrefixAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('prefix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_assignments', to='ipam.prefix')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prefix_assignments', to='dcim.zone')),
            ],
            options={
                'ordering': ['zone', 'prefix'],
                'unique_together': {('zone', 'prefix')},
            },
        ),
        migrations.CreateModel(
            name='ZoneInterfaceAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('interface', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_assignments', to='dcim.interface')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interface_assignments', to='dcim.zone')),
            ],
            options={
                'ordering': ['zone', 'interface'],
                'unique_together': {('zone', 'interface')},
            },
        ),
        migrations.CreateModel(
            name='ZoneDeviceAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_assignments', to='dcim.device')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_assignments', to='dcim.zone')),
            ],
            options={
                'ordering': ['zone', 'device'],
                'unique_together': {('zone', 'device')},
            },
        ),
        migrations.AddField(
            model_name='zone',
            name='devices',
            field=models.ManyToManyField(blank=True, related_name='zones', through='dcim.ZoneDeviceAssignment', to='dcim.device'),
        ),
        migrations.AddField(
            model_name='zone',
            name='interfaces',
            field=models.ManyToManyField(blank=True, related_name='zones', through='dcim.ZoneInterfaceAssignment', to='dcim.interface'),
        ),
        migrations.AddField(
            model_name='zone',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='zones', to='dcim.location'),
        ),
        migrations.AddField(
            model_name='zone',
            name='prefixes',
            field=models.ManyToManyField(blank=True, related_name='zones', through='dcim.ZonePrefixAssignment', to='ipam.prefix'),
        ),
        migrations.AddField(
            model_name='zone',
            name='status',
            field=nautobot.extras.models.statuses.StatusField(on_delete=django.db.models.deletion.PROTECT, to='extras.status'),
        ),
        migrations.AddField(
            model_name='zone',
            name='tags',
            field=nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag'),
        ),
        migrations.AddField(
            model_name='zone',
            name='tenant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='zones', to='tenancy.tenant'),
        ),
        migrations.AddField(
            model_name='zone',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='zones', to='dcim.zonetype'),
        ),
        migrations.AddField(
            model_name='zone',
            name='vlans',
            field=models.ManyToManyField(blank=True, related_name='zones', through='dcim.ZoneVLANAssignment', to='ipam.vlan'),
        ),
        migrations.AddField(
            model_name='zone',
            name='vrfs',
            field=models.ManyToManyField(blank=True, related_name='zones', through='dcim.ZoneVRFAssignment', to='ipam.vrf'),
        ),
    ]
