# Generated by Django 3.1.14 on 2022-03-19 23:21

from django.db import migrations
from django.db import models

# Models that need to share their parent's timestamps.
COMPONENT_MODELS = [
    "dcim.consoleport",
    "dcim.consoleporttemplate",
    "dcim.consoleserverport",
    "dcim.consoleserverporttemplate",
    "dcim.devicebay",
    "dcim.devicebaytemplate",
    "dcim.frontport",
    "dcim.frontporttemplate",
    "dcim.interface",
    "dcim.interfacetemplate",
    "dcim.inventoryitem",
    "dcim.poweroutlet",
    "dcim.poweroutlettemplate",
    "dcim.powerport",
    "dcim.powerporttemplate",
    "dcim.rearport",
    "dcim.rearporttemplate",
]


def populate_device_component_timestamps(apps, schema_editor):
    """
    Set each device component that now has created/last_updated fields to use that of their parent
    object (device or device_type).
    """
    for model_path in COMPONENT_MODELS:
        model = apps.get_model(model_path)
        parent_field = "device_type" if model_path.endswith("template") else "device"

        # Iterate each model, derive its "parent" field, use that to perform a nested subquery for
        # each field to dynamically update in a single query. It's super effective!
        model.objects.all().update(
            created=models.Subquery(
                model.objects.filter(pk=models.OuterRef("pk")).values(f"{parent_field}__created")[:1]
            ),
            last_updated=models.Subquery(
                model.objects.filter(pk=models.OuterRef("pk")).values(f"{parent_field}__last_updated")[:1]
            ),
        )


class Migration(migrations.Migration):

    dependencies = [
        ("dcim", "0015_device_components__changeloggedmodel"),
    ]

    operations = [
        migrations.RunPython(populate_device_component_timestamps, migrations.RunPython.noop),
    ]
