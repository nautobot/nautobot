# Generated by Django 3.2.24 on 2024-03-01 01:35

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.core.models.tree_queries
import nautobot.extras.models.mixins
import nautobot.extras.models.models
import nautobot.extras.models.roles
import nautobot.extras.models.statuses
import nautobot.extras.utils
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('tenancy', '0008_tagsfield'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('extras', '0104_contact_contactassociation_team'),
        ('dcim', '0056_softwareimage_m2m_and_device_fk'),
    ]

    operations = [
        migrations.CreateModel(
            name='Controller',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('local_config_context_data', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('local_config_context_data_owner_object_id', models.UUIDField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('deployed_controller_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controllers', to='dcim.device')),
                ('deployed_controller_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controllers', to='dcim.deviceredundancygroup')),
                ('external_integration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controllers', to='extras.externalintegration')),
                ('local_config_context_data_owner_content_type', nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(blank=True, default=None, limit_choices_to=nautobot.extras.utils.FeatureQuery('config_context_owners'), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='controllers', to='contenttypes.contenttype')),
                ('local_config_context_schema', nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controllers', to='extras.configcontextschema')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='controllers', to='dcim.location')),
                ('platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controllers', to='dcim.platform')),
                ('role', nautobot.extras.models.roles.RoleField(on_delete=django.db.models.deletion.PROTECT, related_name='controllers', to='extras.role')),
                ('status', nautobot.extras.models.statuses.StatusField(on_delete=django.db.models.deletion.PROTECT, related_name='controllers', to='extras.status')),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controllers', to='tenancy.tenant')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, nautobot.extras.models.models.ConfigContextSchemaValidationMixin),
        ),
        migrations.CreateModel(
            name='ControllerDeviceGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('local_config_context_data', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('local_config_context_data_owner_object_id', models.UUIDField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('weight', models.PositiveIntegerField(default=1000)),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dcim.controller')),
                ('local_config_context_data_owner_content_type', nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(blank=True, default=None, limit_choices_to=nautobot.extras.utils.FeatureQuery('config_context_owners'), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='controller_device_groups', to='contenttypes.contenttype')),
                ('local_config_context_schema', nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controller_device_groups', to='extras.configcontextschema')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='dcim.controllerdevicegroup')),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, nautobot.extras.models.models.ConfigContextSchemaValidationMixin),
            managers=[
                ('objects', nautobot.core.models.tree_queries.TreeManager()),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='deployed_controller_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices', to='dcim.controllerdevicegroup'),
        ),
    ]
