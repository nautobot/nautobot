# Generated by Django 4.2.21 on 2025-05-15 20:16

import uuid

from django.db import migrations, models
import django.db.models.deletion


def migrate_device_cluster_assignments(apps, schema_editor):
    """
    Migrate existing device cluster assignments from the old ForeignKey field
    to the new many-to-many relationship through DeviceClusterAssignment.
    """
    Device = apps.get_model("dcim", "Device")
    DeviceClusterAssignment = apps.get_model("dcim", "DeviceClusterAssignment")
    devices_with_clusters = Device.objects.filter(cluster__isnull=False).select_related('cluster')
    assignments_to_create = []
    for device in devices_with_clusters:
        assignments_to_create.append(
            DeviceClusterAssignment(device=device, cluster=device.cluster)
        )
    if assignments_to_create:
        DeviceClusterAssignment.objects.bulk_create(assignments_to_create, batch_size=1000)


def reverse_migrate_device_cluster_assignments(apps, schema_editor):
    """
    Reverse migration - restore the cluster field from DeviceClusterAssignment records.
    Note: This can only restore one cluster per device if multiple exist.
    """
    DeviceClusterAssignment = apps.get_model("dcim", "DeviceClusterAssignment")

    # For each device, get the first cluster assignment and set it as the device's cluster
    for assignment in DeviceClusterAssignment.objects.select_related('device', 'cluster'):
        if not assignment.device.cluster:
            assignment.device.cluster = assignment.cluster
            assignment.device.save(update_fields=['cluster'])


class Migration(migrations.Migration):
    dependencies = [
        ("virtualization", "0030_alter_virtualmachine_local_config_context_data_owner_content_type_and_more"),
        ("dcim", "0069_softwareimagefile_external_integration"),
    ]

    operations = [
        # First create the DeviceClusterAssignment model
        migrations.CreateModel(
            name="DeviceClusterAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "cluster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="device_assignments",
                        to="virtualization.cluster",
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cluster_assignments",
                        to="dcim.device",
                    ),
                ),
            ],
            options={
                "ordering": ["device", "cluster"],
                "unique_together": {("device", "cluster")},
            },
        ),
        migrations.AddField(
            model_name="device",
            name="clusters",
            field=models.ManyToManyField(
                blank=True, related_name="devices", through="dcim.DeviceClusterAssignment", to="virtualization.cluster"
            ),
        ),
        migrations.RunPython(migrate_device_cluster_assignments, reverse_migrate_device_cluster_assignments),
        migrations.RemoveField(
            model_name="device",
            name="cluster",
        ),
    ]
