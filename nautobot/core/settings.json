{
    "type": "object",
    "definitions": {
        "absolute_path": {
            "type": "string"
        },
        "callable": {
            "type": "string"
        },
        "regex": {
            "type": "string"
        },
        "relative_path": {
            "type": "string"
        }
    },
    "properties": {
        "ADMINS": {
            "type": "array",
            "items": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "default": [],
            "description": "List of administrators' names and emails. e.g.[['Hank Hill', 'hhill@example.com'],['Dale Gribble', 'dgribble@example.com'],]"
        },
        "ALLOWED_HOSTS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of valid fully-qualified domain names (FQDNs) and/or IP addresses that can be used to reach the Nautobot service."
        },
        "BANNER_BOTTOM": {
            "type": "string",
            "default": "",
            "description": "Custom content to be displayed in a banner at the bottom of the page. HTML is allowed."
        },
        "BANNER_LOGIN": {
            "type": "string",
            "default": "",
            "description": "Custom content to be displayed on tge login page above the login form. HTML is allowed."
        },
        "BANNER_TOP": {
            "type": "string",
            "default": "",
            "description": "Custom content to be displayed in a banner at the top of the page. HTML is allowed."
        },
        "BRANDING_FILEPATHS": {
            "type": "object",
            "properties": {
                "logo": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Navbar logo"
                },
                "favicon": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Browser favicon"
                },
                "icon_16": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "16x16px icon"
                },
                "icon_32": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "32x32px icon"
                },
                "icon_180": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "180x180px icon - used for the apple-touch-icon header"
                },
                "icon_192": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "192x192px icon"
                },
                "icon_mask": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Mono-chrome icon used for the mask-icon header"
                },
                "header_bullet": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Bullet image used for various view headers"
                },
                "nav_bullet": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Bullet image used for nav menu headers"
                }
            },
            "description": "A set of filepaths relative to the MEDIA_ROOT which locate image assets used for custom branding"
        },
        "BRANDING_PREPENDED_FILENAME": {
            "type": "string",
            "default": "nautobot_",
            "description": "Defines the prefix of the filename when exporting to CSV/YAML or export templates."
        },
        "BRANDING_TITLE": {
            "type": "string",
            "default": "Nautobot",
            "description": "Defines the custom branding title that should be used in place of 'Nautobot' withint user facing areas of the application like the HTML title of web pages."
        },
        "BRANDING_URLS": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "format": "uri",
                    "default": "https://github.com/nautobot/nautobot",
                    "description": "Code link in the footer"
                },
                "docs": {
                    "$ref": "#/definitions/relative_path",
                    "default": "static/docs/index.html",
                    "description": "Docs link in the footer"
                },
                "help": {
                    "type": "string",
                    "format": "uri",
                    "default": "https://github.com/nautobot/nautobot/wiki",
                    "description": "Help link in the footer"
                }
            },
            "description": "A set of URLs that correspond to helpful links in the right of the footer on every web page."
        },
        "CACHES": {
            "type": "object",
            "properties": {
                "default": {
                    "type": "object",
                    "properties": {
                        "BACKEND": {
                            "type": "string",
                            "default": "django_redis.cache.RedisCache",
                            "enum": [
                                "django_redis.cache.RedisCache",
                                "django_prometheus.cache.backends.redis.RedisCache"
                            ]
                        },
                        "LOCATION": {
                            "type": "string",
                            "format": "uri",
                            "default": "redis://localhost:6379/1"
                        },
                        "TIMEOUT": {
                            "type": "integer",
                            "default": 300
                        },
                        "OPTIONS": {
                            "type": "object",
                            "properties": {
                                "CLIENT_CLASS": {
                                    "type": "string",
                                    "default": "django_redis.client.DefaultClient"
                                },
                                "PASSWORD": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        }
                    }
                },
                "additionalProperties": true
            },
            "description": "The CACHES setting is required to simplify the configuration for django-redis."
        },
        "CELERY_BROKER_TRANSPORT_OPTIONS": {
            "type": "object",
            "default": {},
            "description": "A dict of additional options passed to the Celery broker transport. This is only required when configuring Celery to utilize Redis Sentinel."
        },
        "CELERY_BROKER_URL": {
            "type": "string",
            "format": "uri",
            "default": "redis://localhost:6379/0",
            "description": "Celery broker URL used to tell workers where queues are located."
        },
        "CELERY_TASK_DEFAULT_QUEUE": {
            "type": "string",
            "default": "default",
            "description": "The default celery queue name that will be used by workers if no queue is specified in the nautobot-server celery worker command."
        },
        "CELERY_TASK_SOFT_TIME_LIMIT": {
            "type": "integer",
            "default": 300,
            "description": "The global Celery task soft timeout (in seconds)."
        },
        "CELERY_TASK_TIME_LIMIT": {
            "type": "integer",
            "default": 600,
            "description": "The global Celery task hard timeout (in seconds)."
        },
        "CELERY_WORKER_PROMETHEUS_PORTS": {
            "type": "array",
            "items": {
                "type": "integer"
            },
            "default": [],
            "description": "The global Celery task hard timeout (in seconds)."
        },
        "CELERY_WORKER_REDIRECT_STDOUTS": {
            "type": "boolean",
            "default": true,
            "description": "If enabled stdout and stderr of running jobs will be redirected to the task logger."
        },
        "CELERY_WORKER_REDIRECT_STDOUTS_LEVEL": {
            "type": "string",
            "default": "WARNING",
            "enum": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
            "description": "The log level of log messages generated by redirected job stdout and stderr."
        },
        "CHANGELOG_RETENTION": {
            "type": "integer",
            "default": 90,
            "description": "The number of days to retain logged changes (object creations, updates, and deletions)."
        },
        "CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED": {
            "type": "boolean",
            "default": false,
            "description": "If True, it will be possible to apply Config Context objects to Devices and Virtual Machines via Dynamic Group membership. When set to False this behavior will not be available."
        },
        "CONTENT_TYPE_CACHE_TIMEOUT": {
            "type": "integer",
            "default": 0,
            "description": "The number of seconds to cache the content type accessible via a object's class property Object._content_type_cached."
        },
        "CORS_ALLOW_ALL_ORIGINS": {
            "type": "boolean",
            "default": false,
            "description": "If True, all origins will be allowed. Other settings restricting allowed origins will be ignored."
        },
        "CORS_ALLOWED_ORIGINS": {
            "type": "array",
            "items": {
                "type": "string",
                "format": "uri"
            },
            "default": [],
            "description": "A list of origins that are authorized to make cross-site HTTP requests."
        },
        "CORS_ALLOWED_ORIGIN_REGEXES": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/regex"
            },
            "default": [],
            "description": "A list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests."
        },
        "CSRF_TRUSTED_ORIGINS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of hosts (fully-qualified domain names (FQDNs) or subdomains) that are considered trusted origins for cross-site secure requests such as HTTPS POST."
        },
        "DATABASES": {
            "type": "object",
            "properties": {
                "default": {
                    "type": "object",
                    "properties": {
                        "NAME": {
                            "type": "string",
                            "default": "nautobot",
                            "description": "Database name"
                        },
                        "USER": {
                            "type": "string",
                            "default": "",
                            "description": "Database username"
                        },
                        "PASSWORD": {
                            "type": "string",
                            "default": "",
                            "description": "Database password"
                        },
                        "HOST": {
                            "type": "string",
                            "default": "localhost",
                            "description": "Name or IP addrress of the database server (use localhost if running locally)"
                        },
                        "PORT": {
                            "type": "string",
                            "default": "",
                            "description": "The port to use when connecting to the database"
                        },
                        "CONN_MAX_AGE": {
                            "type": "integer",
                            "default": 300,
                            "description": "Lifetime of a persistent database connection in seconds"
                        },
                        "ENGINE": {
                            "type": "string",
                            "default": "django.db.backends.postgresql",
                            "enum": [
                                "django.db.backends.postgresql",
                                "django.db.backends.mysql",
                                "django_prometheus.db.backends.postgresql",
                                "django_prometheus.db.backends.mysql"
                            ],
                            "description": "The database backend to use"
                        }
                    },
                    "additionalProperties": true
                },
                "additionalProperties": true
            }
        },
        "DATABASE_ROUTERS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "custom database router to generate the before & after queries for generating diffs. Used for Nautobot Version Control App."
        },
        "DATE_FORMAT": {
            "type": "string",
            "default": "N j, Y"
        },
        "DATETIME_FORMAT": {
            "type": "string",
            "default": "N j, Y g:i a"
        },
        "DEBUG": {
            "type": "boolean",
            "default": false, 
            "description": "This setting enables debugging."
        },
        "DEPLOYMENT_ID": {
            "type": "string",
            "description": "This setting is used to uniquely but anonymously identify Nautobot deployments when sending installation metrics."
        },
        "DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT": {
            "type": "integer",
            "default": 0,
            "description": "The number of seconds to cache the member list of dynamic groups."
        },
        "EXEMPT_VIEW_PERMISSIONS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of Nautobot models to exempt from the enforcement of view permissions."
        },
        "EXTERNAL_AUTH_DEFAULT_GROUPS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "The list of group names to assign a new user account when created using 3rd-party authentication."
        },
        "EXTERNAL_AUTH_DEFAULT_PERMISSIONS": {
            "type": "object",
            "default": {},
            "description": "The list of group names to assign a new user account when created using 3rd-part authentication."
        },
        "FORCE_SCRIPT_NAME": {
            "type": "string",
            "default": "",
            "description": "If not None, this will be used as the value of the SCRIPT_NAME environment variable in any HTTP request."
        },
        "GIT_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/git",
            "description": "The file path to a directory where clone Git repositories will be located."
        },
        "GRAPHQL_COMPUTED_FIELD_PREFIX": {
            "type": "string",
            "default": "cpf",
            "description": "The prefix used for all computed fields in GraphQL. e.g. my_field => cpf_my_field"
        },
        "GRAPHQL_CUSTOM_FIELD_PREFIX": {
            "type": "string",
            "default": "cf",
            "description": "The prefix used for all custom fields in GraphQL. e.g. my_field => cf_my_field"
        },
        "GRAPHQL_RELATIONSHIP_PREFIX": {
            "type": "string",
            "default": "rel",
            "description": "The prefix used for all relationship associations in GraphQL. e.g. my_relationship => rel_my_relationship"
        },
        "HTTP_PROXIES": {
            "type": "object",
            "default": {},
            "description": "A dict of HTTP proxies to use for outbound requests originating from Nautobot."
        },
        "INSTALLATION_METRICS_ENABLED": {
            "type": "boolean",
            "default": true,
            "description": "When set to True, Nautobot will send anonymized installation metrics to the Nautobot maintainers when running the post_upgrade or send_installation_metrics management commands."
        },
        "INTERNAL_IPS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [
                "127.0.0.1",
                "::1"
            ],
            "description": "A list of IP addresses recognized as internal to the system, used to control the display of debugging output."
        },
        "JOB_CREATE_FILE_MAX_SIZE": {
            "type": "integer",
            "default": 10485760,
            "description": "The maximum file size (in bytes) that a running Job will be allowed to create in a single call to Job.create_file()."
        },
        "JOB_FILE_IO_STORAGE": {
            "type": "string",
            "default": "db_file_storage.storage.DatabaseFileStorage",
            "description": "The backend storage engine for handling files provided as input to Jobs and files generated as output by Jobs."
        },
        "JOBS_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/jobs",
            "description": "The file path to a directory where Jobs can be discovered."
        },
        "LOCATION_NAME_AS_NATURAL_KEY": {
            "type": "boolean",
            "default": false,
            "description": "Set this to True to use the location name alone as the natural key for Location objects. Set this to False to use the sequence (name, parent__name, parent__parent__name, ...) as the natural key instead."
        },
        "LOGGING": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "integer",
                    "default": 1
                },
                "disable_existing_loggers": {
                    "type": "boolean",
                    "default": false
                },
                "formatters": {
                    "type": "object",
                    "default": {
                        "normal": {
                            "format": "%(asctime)s.%(msecs)03d %(levelname)-7s %(name)s :\n  %(message)s",
                            "datefmt": "%H:%M:%S"
                        },
                        "verbose": {
                            "format": "%(asctime)s.%(msecs)03d %(levelname)-7s %(name)-20s %(filename)-15s %(funcName)30s() :\n  %(message)s",
                            "datefmt": "%H:%M:%S"
                        }
                    },
                    "additionalProperties": true
                },
                "handlers": {
                    "type": "object",
                    "default": {
                        "normal_console": {
                            "level": "INFO",
                            "class": "logging.StreamHandler",
                            "formatter": "normal"
                        },
                        "verbose_console": {
                            "level": "DEBUG",
                            "class": "logging.StreamHandler",
                            "formatter": "verbose"
                        }
                    },
                    "additionalProperties": true
                },
                "loggers": {
                    "type": "object",
                    "default": {
                        "django": {
                            "handlers": [
                                "normal_console"
                            ],
                            "level": "INFO"
                        },
                        "nautobot": {
                            "handlers": [
                                "normal_console"
                            ],
                            "level": "INFO"
                        }
                    },
                    "additionalProperties": true
                },
                "additionalProperties": true
            },
            "additionalProperties": true,
            "description": "A dictionary contains the configuration settings for logging in Nautobot."
        },
        "LOG_DEPRECATION_WARNINGS": {
            "type": "boolean",
            "default": false,
            "description": "This can be set to True to allow deprecation warnings raised by Nautobot to (additionally) be logged as WARNING level log messages."
        },
        "MAINTENANCE_MODE": {
            "type": "boolean",
            "default": false,
            "description": "Setting this to true makes Nautobot to go into maintnance mode."
        },
        "MAX_PAGE_SIZE": {
            "type": "integer",
            "default": 1000,
            "description": "This parameter defines the maximum acceptable number of objects for a user to request."
        },
        "MEDIA_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/media",
            "description": "The file path to the location where media files (such as image attachments) are stored."
        },
        "METRICS_ENABLED": {
            "type": "boolean",
            "default": false,
            "description": "Toggle the availability Prometheus-compatible metrics at /metrics."
        },
        "NAPALM_ARGS": {
            "type": "object",
            "default": {},
            "description": "A dictionary of optional arguments to pass to NAPALM when instantiating a network driver."
        },
        "NAPALM_PASSWORD": {
            "type": "string",
            "default": "",
            "description": "Nautobot will use this optional credential with NAPALM_USERNAME  when authenticating to remote devices via the NAPALM library, if installed."
        },
        "NAPALM_TIMEOUT": {
            "type": "integer",
            "default": 30,
            "description": "The amount of time (in seconds) to wait for NAPALM to connect to a device."
        },
        "NAPALM_USERNAME": {
            "type": "string",
            "default": "",
            "description": "Nautobot will use this optional credential with NAPALM_PASSWORD when authenticating to remote devices via the NAPALM library, if installed."
        },
        "NAUTOBOT_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/",
            "description": "The filesystem path to use to store Nautobot files (Jobs, uploaded images, Git repositories, etc.)."
        },
        "NETWORK_DRIVERS": {
            "type": "object",
            "default": {},
            "description": "An optional dictionary to extend or override the default Platform.network_driver translations provided by netutils."
        },
        "PAGINATE_COUNT": {
            "type": "integer",
            "default": 50,
            "description": "The default maximum number of objects to display per page within each list of objects. Applies to both the UI and the REST API."
        },
        "PER_PAGE_DEFAULTS": {
            "type": "array",
            "items": {
                "type": "integer"
            },
            "default": [
                25,
                50,
                100,
                250,
                500,
                1000
            ],
            "description": "The options displayed in the web interface dropdown to limit the number of objects per page."
        },
        "PLUGINS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of installed Nautobot plugins to enable."
        },
        "PLUGINS_CONFIG": {
            "type": "object",
            "default": {},
            "description": "This parameter holds configuration settings for individual Nautobot plugins."
        },
        "PREFER_IPV4": {
            "type": "boolean",
            "default": false,
            "description": "When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to prefer IPv4 instead."
        },
        "RACK_ELEVATION_DEFAULT_UNIT_HEIGHT": {
            "type": "integer",
            "default": 22,
            "description": "Default height (in pixels) of a unit within a rack elevation."
        },
        "RACK_ELEVATION_DEFAULT_UNIT_WIDTH": {
            "type": "integer",
            "default": 220,
            "description": "Default width (in pixels) of a unit within a rack elevation."
        },
        "REDIS_LOCK_TIMEOUT": {
            "type": "integer",
            "default": 600,
            "description": "Maximum duration of a Redis lock created when calling /api/ipam/prefixes/{id}/available-prefixes/ or /api/ipam/prefixes/{id}/available-ips/ to avoid inadvertently allocating the same prefix or IP to multiple simultaneous callers."
        },
        "RELEASE_CHECK_TIMEOUT": {
            "type": "integer",
            "default": 86400,
            "description": "The number of seconds to retain the latest version that is fetched from the GitHub API before automatically invalidating it and fetching it from the API again."
        },
        "RELEASE_CHECK_URL": {
            "type": "string",
            "format": "uri",
            "default": "",
            "description": "This parameter defines the URL of the repository that will be checked periodically for new Nautobot releases."
        },
        "SANITIZER_PATTERNS": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/regex"
            },
            "default": [],
            "description": "List of (regular expression, replacement pattern) tuples used by the nautobot.core.utils.logging.sanitize() function."
        },
        "SECRET_KEY": {
            "type": "string",
            "default": "",
            "description": "This is a secret, random string used to assist in the creation new cryptographic hashes for passwords and HTTP cookies."
        },
        "SESSION_CACHE_ALIAS": {
            "type": "string",
            "default": "",
            "description": "The Alias for the sessions cache defined in CACHES, used in Nautobot Version Control App."
        },
        "SESSION_COOKIE_AGE": {
            "type": "integer",
            "default": 1209600,
            "description": "The age of session cookies, in seconds."
        },
        "SESSION_ENGINE": {
            "type": "string",
            "default": "django.contrib.sessions.backends.db",
            "description": "Controls where Nautobot stores session data."
        },
        "SESSION_EXPIRE_AT_BROWSER_CLOSE": {
            "type": "boolean",
            "default": false,
            "description": "If this is set to True, Nautobot will use browser-length cookies - cookies that expire as soon as the user closes their browser."
        },
        "SESSION_FILE_PATH": {
            "$ref": "#/definitions/relative_path",
            "default": "",
            "description": "A local file path may be specified here and Nautobot will store session data as files instead of using the database."
        },
        "SHORT_DATE_FORMAT": {
            "type": "string",
            "default": "Y-m-d"
        },
        "SHORT_DATETIME_FORMAT": {
            "type": "string",
            "default": "Y-m-d H:i"
        },
        "SHORT_TIME_FORMAT": {
            "type": "string",
            "default": "H:i"
        },
        "STATIC_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/static",
            "description": "The location where static files (such as CSS, JavaScript, fonts, or images) used to serve the web interface will be staged by the nautobot-server collectstatic command."
        },
        "STORAGE_BACKEND": {
            "type": "string",
            "default": "",
            "description": "The backend storage engine for handling uploaded files (e.g. image attachments)."
        },
        "STORAGE_CONFIG": {
            "type": "object",
            "default": {},
            "description": "A dictionary of configuration parameters for the storage backend configured as STORAGE_BACKEND."
        },
        "STRICT_FILTERING": {
            "type": "boolean",
            "default": true,
            "description": "If set to True (default), UI and REST API filtering of object lists will fail if an unknown/unrecognized filter parameter is provided as a URL parameter."
        },
        "SUPPORT_MESSAGE": {
            "type": "string",
            "default": "",
            "description": "A message to include on error pages (status code 403, 404, 500, etc.) when an error occurs."
        },
        "TEST_FACTORY_SEED": {
            "type": "string",
            "default": "",
            "description": "This configuration provides a fixed seed string for the pseudo-random generator used to populate test data into the database, providing for reproducible randomness across consecutive test runs."
        },
        "TEST_PERFORMANCE_BASELINE_FILE": {
            "type": "string",
            "default": "nautobot/core/tests/performance_baselines.yml",
            "description": "TEST_PERFORMANCE_BASELINE_FILE is set to a certain file path, this file path should point to a .yml file."
        },
        "TEST_USE_FACTORIES": {
            "type": "boolean",
            "default": false,
            "description": "If set to True, the Nautobot test runner will call nautobot-server generate_test_data ... before executing any test cases, pre-populating the test database with various pseudo-random instances of many of Nautobot's data models."
        },
        "TIME_FORMAT": {
            "type": "string",
            "default": "g:i a"
        },
        "TIME_ZONE": {
            "type": "string",
            "default": "UTC"
        },
        "UI_RACK_VIEW_TRUNCATE_FUNCTION": {
            "$ref": "#/definitions/callable",
            "default": "UI_RACK_VIEW_TRUNCATE_FUNCTION",
            "description": "This setting function is used to perform the rack elevation truncation feature."
        }
    }
}