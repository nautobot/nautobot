{
    "type": "object",
    "definitions": {
        "absolute_path": {
            "type": "string"
        },
        "callable": {
            "type": "string"
        },
        "regex": {
            "type": "string"
        },
        "relative_path": {
            "type": "string"
        }
    },
    "properties": {
        "ADMINS": {
            "type": "array",
            "items": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "default": [],
            "description": "List of administrators' names and emails. e.g. `[['Hank Hill', 'hhill@example.com'], ['Dale Gribble', 'dgribble@example.com']]`"
        },
        "ALLOW_REQUEST_PROFILING": {
            "type": "boolean",
            "default": false,
            "description": "Global setting to allow or deny users from enabling request profiling on their login session.",
            "details": "See the administration guide on [request profiling](../guides/request-profiling.md) for more information.",
            "version_added": "2.2.0"
        },
        "ALLOWED_HOSTS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of valid fully-qualified domain names (FQDNs) and/or IP addresses that can be used to reach the Nautobot service. (If provided as an environment variable, it should be a space-separated string, for example `NAUTOBOT_ALLOWED_HOSTS=\"localhost 127.0.0.1 example.com\"`)",
            "details": "Usually this is the same as the hostname for the Nautobot server, but can also be different; for example, when using a reverse proxy serving the Nautobot website under a different FQDN than the hostname of the Nautobot server. To help guard against [HTTP Host header attacks](https://docs.djangoproject.com/en/stable/topics/security/#host-headers-virtual-hosting), Nautobot will not permit access to the server via any other hostnames or IPs.\n\nKeep in mind that by default Nautobot sets [`USE_X_FORWARDED_HOST`](https://docs.djangoproject.com/en/stable/ref/settings/#use-x-forwarded-host) to `True`, which means that if you're using a reverse proxy, the FQDN used to reach that reverse proxy needs to be in this list.\n\n!!! warning\n    This parameter must always be defined as a list or tuple, even if only a single value is provided.\n\nExample:\n```python\nALLOWED_HOSTS = ['nautobot.example.com', '192.0.2.123']\n```\n\n!!! tip\n    If there is more than one hostname in this list, you may also need to set [CSRF_TRUSTED_ORIGINS](optional-settings.md#csrf_trusted_origins) as well.\nIf you are not yet sure what the domain name and/or IP address of the Nautobot installation will be, and are comfortable accepting the risks in doing so, you can set this to a wildcard (asterisk) to allow all host values:\n```python\nALLOWED_HOSTS = ['*']\n```\n!!! warning\n    It is not recommended to leave this value as `['*']` for production deployments. Please see the [official Django documentation on `ALLOWED_HOSTS`](https://docs.djangoproject.com/en/stable/ref/settings/#allowed-hosts) for help.",
            "environment_variable": "NAUTOBOT_ALLOWED_HOSTS",
            "required_setting": true
        },
        "ALLOWED_URL_SCHEMES": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": ["file", "ftp", "ftps", "http", "https", "irc", "mailto", "sftp", "ssh", "tel", "telnet", "tftp", "vnc", "xmpp"],
            "description": "A list of permitted URL schemes referenced when rendering links within Nautobot. Note that only the schemes specified in this list will be accepted; if adding your own, be sure to replicate all of the default values as well (excluding those schemes which are not desirable)."
        },
        "BANNER_BOTTOM": {
            "type": "string",
            "default": "",
            "description": "Custom content to be displayed in a banner at the bottom of the page. HTML is allowed.",
            "details": "+/- 1.2.0\n    If you do not set a value for this setting in your `nautobot_config.py`, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in `nautobot_config.py`, it will override any dynamically configured value."
        },
        "BANNER_LOGIN": {
            "type": "string",
            "default": "",
            "description": "Custom content to be displayed on the login page above the login form. HTML is allowed.",
            "details": "+/- 1.2.0\n    If you do not set a value for this setting in your `nautobot_config.py`, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in `nautobot_config.py`, it will override any dynamically configured value."
        },
        "BANNER_TOP": {
            "type": "string",
            "default": "",
            "description": "Custom content to be displayed in a banner at the top of the page. HTML is allowed.",
            "details": "+/- 1.2.0\n    If you do not set a value for this setting in your `nautobot_config.py`, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in `nautobot_config.py`, it will override any dynamically configured value."
        },
        "BRANDING_FILEPATHS": {
            "type": "object",
            "properties": {
                "logo": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Navbar logo",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_LOGO"
                },
                "favicon": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Browser favicon",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_FAVICON"
                },
                "icon_16": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "16x16px icon",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_ICON_16"
                },
                "icon_32": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "32x32px icon",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_ICON_32"
                },
                "icon_180": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "180x180px icon - used for the apple-touch-icon header",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_ICON_180"
                },
                "icon_192": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "192x192px icon",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_ICON_192"
                },
                "icon_mask": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Mono-chrome icon used for the mask-icon header",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_ICON_MASK"
                },
                "header_bullet": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Bullet image used for various view headers",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_HEADER_BULLET"
                },
                "nav_bullet": {
                    "$ref": "#/definitions/relative_path",
                    "default": "",
                    "description": "Bullet image used for nav menu headers",
                    "environment_variable": "NAUTOBOT_BRANDING_FILEPATHS_NAV_BULLET"
                }
            },
            "description": "A set of filepaths relative to the [`MEDIA_ROOT`](#media_root) which locate image assets used for custom branding. Each of these assets takes the place of the corresponding stock Nautobot asset. This allows for, for instance, providing your own navbar logo and favicon. If a custom image asset is not provided for any of the above options, the stock Nautobot asset is used."
        },
        "BRANDING_PREPENDED_FILENAME": {
            "type": "string",
            "default": "nautobot_",
            "description": "Defines the prefix of the filename when exporting to CSV/YAML or export templates.",
            "environment_variable": "NAUTOBOT_BRANDING_PREPENDED_FILENAME",
            "version_added": "1.3.4"
        },
        "BRANDING_TITLE": {
            "type": "string",
            "default": "Nautobot",
            "description": "Defines the custom branding title that should be used in place of 'Nautobot' within user facing areas of the application like the HTML title of web pages.",
            "version_added": "1.2.0"
        },
        "BRANDING_URLS": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "format": "uri",
                    "default": "https://github.com/nautobot/nautobot",
                    "description": "Code link in the footer",
                    "environment_variable": "NAUTOBOT_BRANDING_URLS_CODE"
                },
                "docs": {
                    "$ref": "#/definitions/relative_path",
                    "default": "static/docs/index.html",
                    "description": "Docs link in the footer",
                    "environment_variable": "NAUTOBOT_BRANDING_URLS_DOCS"
                },
                "help": {
                    "type": "string",
                    "format": "uri",
                    "default": "https://github.com/nautobot/nautobot/wiki",
                    "description": "Help link in the footer",
                    "environment_variable": "NAUTOBOT_BRANDING_URLS_HELP"
                }
            },
            "description": "A set of URLs that correspond to helpful links in the right of the footer on every web page. If a custom URL is not provided for any of the links, the default link within the Nautobot community is used.",
            "version_added": "1.2.0"
        },
        "CACHES": {
            "type": "object",
            "properties": {
                "default": {
                    "type": "object",
                    "properties": {
                        "BACKEND": {
                            "type": "string",
                            "default": "django_redis.cache.RedisCache",
                            "enum": [
                                "django_redis.cache.RedisCache",
                                "django_prometheus.cache.backends.redis.RedisCache"
                            ]
                        },
                        "LOCATION": {
                            "type": "string",
                            "format": "uri",
                            "default": "redis://localhost:6379/1"
                        },
                        "TIMEOUT": {
                            "type": "integer",
                            "default": 300
                        },
                        "OPTIONS": {
                            "type": "object",
                            "properties": {
                                "CLIENT_CLASS": {
                                    "type": "string",
                                    "default": "django_redis.client.DefaultClient"
                                },
                                "PASSWORD": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        }
                    }
                },
                "additionalProperties": true
            },
            "description": "The CACHES setting is required to simplify the configuration for django-redis.",
            "required_setting": true
        },
        "CELERY_BROKER_TRANSPORT_OPTIONS": {
            "type": "object",
            "default": {},
            "description": "A dict of additional options passed to the Celery broker transport.",
            "details": "This is only required when [configuring Celery to utilize Redis Sentinel](../../administration/guides/caching.md#celery-sentinel-configuration)."
        },
        "CELERY_BROKER_URL": {
            "type": "string",
            "format": "uri",
            "default": "redis://localhost:6379/0",
            "description": "Celery broker URL used to tell workers where queues are located.",
            "environment_variable": "NAUTOBOT_CELERY_BROKER_URL"
        },
        "CELERY_TASK_DEFAULT_QUEUE": {
            "type": "string",
            "default": "default",
            "description": "The default celery queue name that will be used by workers if no queue is specified in the `nautobot-server celery worker` command. This queue will also be used by celery tasks if no queue is specified when a task is run.",
            "environment_variable": "NAUTOBOT_CELERY_TASK_DEFAULT_QUEUE",
            "version_added": "1.5.0"
        },
        "CELERY_TASK_SOFT_TIME_LIMIT": {
            "type": "integer",
            "default": 300,
            "description": "The global Celery task soft timeout (in seconds).",
            "details": "Any background task that exceeds this duration will receive a `SoftTimeLimitExceeded` exception and is responsible for handling this exception and performing any necessary cleanup or final operations before ending. See also [`CELERY_TASK_TIME_LIMIT`](#celery_task_time_limit) below.",
            "environment_variable": "NAUTOBOT_CELERY_TASK_SOFT_TIME_LIMIT"
        },
        "CELERY_TASK_TIME_LIMIT": {
            "type": "integer",
            "default": 600,
            "description": "The global Celery task hard timeout (in seconds).",
            "details": "Any background task that exceeds this duration will be forcibly killed with a `SIGKILL` signal.",
            "environment_variable": "NAUTOBOT_CELERY_TASK_TIME_LIMIT"
        },
        "CELERY_WORKER_PROMETHEUS_PORTS": {
            "type": "array",
            "items": {
                "type": "integer"
            },
            "default": [],
            "description": "Ports for Prometheus metric HTTP server running on the celery worker(s).",
            "details": "Normally this should be set to a single port, unless you have multiple workers running on a single machine, i.e.  sharing the same available ports. In that case you need to specify a range of ports greater than or equal to the highest amount of workers you are running on a single machine (comma-separated, like \"8080,8081,8082\"). You can then use the `target_limit` parameter to the Prometheus `scrape_config` to ensure you are not getting duplicate metrics in that case. Set this to an empty list to disable it.",
            "environment_variable": "NAUTOBOT_CELERY_WORKER_PROMETHEUS_PORTS",
            "version_added": "1.5.10"
        },
        "CELERY_WORKER_REDIRECT_STDOUTS": {
            "type": "boolean",
            "default": true,
            "description": "If enabled stdout and stderr of running jobs will be redirected to the task logger.",
            "environment_variable": "NAUTOBOT_CELERY_WORKER_REDIRECT_STDOUTS",
            "version_added": "2.0.0"
        },
        "CELERY_WORKER_REDIRECT_STDOUTS_LEVEL": {
            "type": "string",
            "default": "WARNING",
            "enum": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
            "description": "The log level of log messages generated by redirected job stdout and stderr.",
            "environment_variable": "NAUTOBOT_CELERY_WORKER_REDIRECT_STDOUTS_LEVEL",
            "version_added": "2.0.0"
        },
        "CHANGELOG_RETENTION": {
            "type": "integer",
            "default": 90,
            "description": "The number of days to retain logged changes (object creations, updates, and deletions). Set this to `0` to retain changes in the database indefinitely.",
            "details": "!!! warning\n    If enabling indefinite changelog retention, it is recommended to periodically delete old entries. Otherwise, the database may eventually exceed capacity.\n\n+/- 1.2.0\n    If you do not set a value for this setting in your `nautobot_config.py`, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in `nautobot_config.py`, it will override any dynamically configured value."
        },
        "CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED": {
            "type": "boolean",
            "default": false,
            "description": "If `True`, it will be possible to apply Config Context objects to Devices and Virtual Machines via Dynamic Group membership. When set to `False` this behavior will not be available.",
            "details": "!!! warning\n    With a large number of dynamic groups, enabling this could invoke a performance penalty when processing Config Contexts.",
            "environment_variable": "NAUTOBOT_CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED"
        },
        "CONTENT_TYPE_CACHE_TIMEOUT": {
            "type": "integer",
            "default": 0,
            "description": "The number of seconds to cache the content type accessible via a object's class property `Object._content_type_cached`. This can save frequent calls to `ContentType.objects.get_for_model(model)`. Set this to `0` to disable caching.",
            "environment_variable": "NAUTOBOT_CONTENT_TYPE_CACHE_TIMEOUT",
            "version_added": "1.6.0"
        },
        "CORS_ALLOW_ALL_ORIGINS": {
            "type": "boolean",
            "default": false,
            "description": "If `True`, all origins will be allowed. Other settings restricting allowed origins will be ignored.",
            "details": "Setting this to `True` can be dangerous, as it allows any website to make cross-origin requests to yours. Generally you'll want to restrict the list of allowed origins with [`CORS_ALLOWED_ORIGINS`](#cors_allowed_origins) or [`CORS_ALLOWED_ORIGIN_REGEXES`](#cors_allowed_origin_regexes).",
            "environment_variable": "NAUTOBOT_CORS_ALLOW_ALL_ORIGINS"
        },
        "CORS_ALLOWED_ORIGINS": {
            "type": "array",
            "items": {
                "type": "string",
                "format": "uri"
            },
            "default": [],
            "description": "A list of origins that are authorized to make cross-site HTTP requests.",
            "details": "An Origin is defined by [the CORS RFC Section 3.2](https://tools.ietf.org/html/rfc6454#section-3.2) as a URI `scheme + hostname + port`, or one of the special values `'null'` or `'file://'`. Default ports (HTTPS = 443, HTTP = 80) are optional here.\n\nThe special value `null` is sent by the browser in [\"privacy-sensitive contexts\"](https://tools.ietf.org/html/rfc6454#section-6), such as when the client is running from a `file://` domain. The special value `file://` is sent accidentally by some versions of Chrome on Android as per this bug.\n\nExample:\n\n```python\n CORS_ALLOWED_ORIGINS = [\n    'https://example.com',\n    'https://sub.example.com',\n    'http://localhost:8080',\n    'http://127.0.0.1:9000'\n]\n```"
        },
        "CORS_ALLOWED_ORIGIN_REGEXES": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/regex"
            },
            "default": [],
            "description": "A list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests.",
            "details": "Useful when [`CORS_ALLOWED_ORIGINS`](#cors_allowed_origins) is impractical, such as when you have a large number of subdomains.\n\nExample:\n\n```python\nCORS_ALLOWED_ORIGIN_REGEXES = [\n    r'^https://\\w+\\.example\\.com$',\n]\n```"
        },
        "CSRF_TRUSTED_ORIGINS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of hosts (fully-qualified domain names (FQDNs) or subdomains) that are considered trusted origins for cross-site secure requests such as HTTPS POST.",
            "details": "For more information, please see the [official Django documentation on `CSRF_TRUSTED_ORIGINS`](https://docs.djangoproject.com/en/stable/ref/settings/#csrf-trusted-origins) and more generally the [official Django documentation on CSRF protection](https://docs.djangoproject.com/en/stable/ref/csrf/#how-it-works)."
        },
        "DATABASES": {
            "type": "object",
            "properties": {
                "default": {
                    "type": "object",
                    "properties": {
                        "NAME": {
                            "type": "string",
                            "default": "nautobot",
                            "description": "Database name"
                        },
                        "USER": {
                            "type": "string",
                            "default": "",
                            "description": "Database username"
                        },
                        "PASSWORD": {
                            "type": "string",
                            "default": "",
                            "description": "Database password"
                        },
                        "HOST": {
                            "type": "string",
                            "default": "localhost",
                            "description": "Name or IP addrress of the database server (use localhost if running locally)"
                        },
                        "PORT": {
                            "type": "string",
                            "default": "",
                            "description": "The port to use when connecting to the database"
                        },
                        "CONN_MAX_AGE": {
                            "type": "integer",
                            "default": 300,
                            "description": "Lifetime of a persistent database connection in seconds"
                        },
                        "ENGINE": {
                            "type": "string",
                            "default": "django.db.backends.postgresql",
                            "enum": [
                                "django.db.backends.postgresql",
                                "django.db.backends.mysql",
                                "django_prometheus.db.backends.postgresql",
                                "django_prometheus.db.backends.mysql"
                            ],
                            "description": "The database backend to use"
                        }
                    },
                    "additionalProperties": true
                },
                "additionalProperties": true
            },
            "required_setting": true
        },
        "DATABASE_ROUTERS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "Custom database router to generate the before & after queries for generating diffs. Used for Nautobot Version Control App."
        },
        "DATE_FORMAT": {
            "type": "string",
            "default": "N j, Y",
            "description": "Custom format for dates. The default results in strings like \"January 22, 2024\".",
            "details": "For detailed instructions on writing format strings, please see [the Django documentation](https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date).",
            "environment_variable": "NAUTOBOT_DATE_FORMAT"
        },
        "DATETIME_FORMAT": {
            "type": "string",
            "default": "N j, Y g:i a",
            "description": "Custom format for date-times. The default results in strings like \"January 22, 2024 1:22 p.m.\".",
            "details": "For detailed instructions on writing format strings, please see [the Django documentation](https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date).",
            "environment_variable": "NAUTOBOT_DATETIME_FORMAT"
        },
        "DEBUG": {
            "type": "boolean",
            "default": false,
            "description": "This setting enables debugging. Debugging should be enabled only during development or troubleshooting.",
            "details": "Note that only clients which access Nautobot from a recognized [internal IP address](#internal_ips) will see debugging tools in the user interface.\n!!! warning\n    Never enable debugging on a production system, as it can expose sensitive data to unauthenticated users and impose a substantial performance penalty.\n\nPlease see the [official Django documentation on `DEBUG`](https://docs.djangoproject.com/en/stable/ref/settings/#debug) for more information.",
            "environment_variable": "NAUTOBOT_DEBUG"
        },
        "DEPLOYMENT_ID": {
            "type": "string",
            "description": "This setting is used to uniquely but anonymously identify Nautobot deployments when sending installation metrics.",
            "details": "Defaults to a random UUID generated at installation time.\n\nThis setting is used to uniquely but anonymously identify Nautobot deployments when sending installation metrics. This setting is not generally intended to be user-serviceable. See the documentation for the [`send_installation_metrics`](../tools/nautobot-server.md#send_installation_metrics) management command for more details.",
            "version_added": "1.6.0"
        },
        "DEVICE_NAME_AS_NATURAL_KEY": {
            "type": "boolean",
            "default": false,
            "description": "`Device` names are not guaranteed globally-unique by Nautobot but in practice they often are. Set this to `True` to use the device `name` alone as the natural key for `Device` objects. Set this to `False` to use the sequence `(name, tenant, location)` as the natural key instead.",
            "version_added": "2.0.0"
        },
        "DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT": {
            "type": "integer",
            "default": 0,
            "description": "The number of seconds to cache the member list of dynamic groups. Set this to `0` to disable caching.",
            "details": "With large datasets (those in scope of a Dynamic Group and number of Dynamic Groups themselves), users will encounter a performance penalty using or accessing the membership lists. This setting allows users to accept a cached list for common use cases (particularly in the UI) that expires after the configured time.",
            "version_added": "1.6.0"
        },
        "EXEMPT_VIEW_PERMISSIONS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of Nautobot models to exempt from the enforcement of view permissions.",
            "details": "Models listed here will be viewable by all users, both authenticated and anonymous.\n\nList models in the form `<app>.<model>`. For example:\n\n```python\nEXEMPT_VIEW_PERMISSIONS = [\n    'dcim.location',\n    'dcim.location_type',\n    'ipam.prefix',\n]\n```\n\n To exempt _all_ models from view permission enforcement, set the following. (Note that `EXEMPT_VIEW_PERMISSIONS` must be an iterable.)\n\n```python\nEXEMPT_VIEW_PERMISSIONS = ['*']\n```\n\n!!! note\n    Using a wildcard will not affect certain potentially sensitive models, such as user permissions. If there is a need to exempt these models, they must be specified individually."
        },
        "EXTERNAL_AUTH_DEFAULT_GROUPS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "The list of group names to assign a new user account when created using 3rd-party authentication."
        },
        "EXTERNAL_AUTH_DEFAULT_PERMISSIONS": {
            "type": "object",
            "default": {},
            "description": "A mapping of permissions to assign a new user account when created using SSO authentication.",
            "details": "Each key in the dictionary will be the permission name specified as `<app_label>.<action>_<model>`, and the value should be set to the permission [constraints](../guides/permissions.md#constraints), or `None` to allow all objects.\n\n### Example Permissions\n\n| Permission | Description |\n|---|---|\n| `{'dcim.view_device': {}}` or `{'dcim.view_device': None}` | Users can view all devices |\n| `{'dcim.add_device': {}}` | Users can add devices, see note below |\n| `{'dcim.view_device': {'location__name__in': ['HQ'], 'location__location_type__name__in': ['Building']}}` | Users can view all devices in the HQ Building |\n\n!!! warning\n    Permissions can be complicated! Be careful when restricting permissions to also add any required prerequisite permissions.\n\n    For example, when adding Devices the Device Role, Device Type, Location, and Status fields are all required fields in order for the UI to function properly. Users will also need view permissions for those fields or the corresponding field selections in the UI will be unavailable and potentially prevent objects from being able to be created or edited.\n\n The following example gives a user a reasonable amount of access to add devices to a single location (Building HQ in this case):\n\n```python\n{\n    'dcim.add_device': {'location__name__in':  ['HQ'], 'location__location_type__name__in': ['Building']},\n    'dcim.view_device': {'location__name__in':  ['HQ'], 'location__location_type__name__in': ['Building']},\n    'dcim.view_devicerole': None,\n    'dcim.view_devicetype': None,\n    'extras.view_status': None,\n    'dcim.view_location': {'name__in':  ['HQ'], 'location_type__name__in': ['Building']},\n    'dcim.view_manufacturer': None,\n    'dcim.view_region': None,\n    'dcim.view_rack': None,\n    'dcim.view_rackgroup': None,\n    'dcim.view_platform': None,\n    'virtualization.view_cluster': None,\n    'virtualization.view_clustergroup': None,\n    'tenancy.view_tenant': None,\n    'tenancy.view_tenantgroup': None,\n}\n```\n\nPlease see [the object permissions page](../guides/permissions.md) for more information."
        },
        "FORCE_SCRIPT_NAME": {
            "type": "string",
            "default": null,
            "description": "If not None, this will be used as the value of the SCRIPT_NAME environment variable in any HTTP request.",
            "details": "This setting can be used to override the server-provided value of `SCRIPT_NAME`, which is most commonly used for hosting Nautobot in a subdirectory (e.g. _example.com/nautobot/_).\n\n!!! important\n    To host Nautobot under a subdirectory you must set this value to match the same prefix configured on your HTTP server. For example, if you configure NGINX to serve Nautobot at `/nautobot/`, you must set `FORCE_SCRIPT_NAME = \"/nautobot/\"`.\n\nPlease see the [official Django documentation on `FORCE_SCRIPT_NAME`](https://docs.djangoproject.com/en/stable/ref/settings/#force-script-name) for more information."
        },
        "GIT_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/git",
            "description": "The file path to a directory where cloned [Git repositories](../../platform-functionality/gitrepository.md) will be located.",
            "environment_variable": "NAUTOBOT_GIT_ROOT"
        },
        "GRAPHQL_COMPUTED_FIELD_PREFIX": {
            "type": "string",
            "default": "cpf",
            "description": "The prefix used for all computed fields in GraphQL. e.g. `my_field` => `cpf_my_field`"
        },
        "GRAPHQL_CUSTOM_FIELD_PREFIX": {
            "type": "string",
            "default": "cf",
            "description": "The prefix used for all custom fields in GraphQL. e.g. `my_field` => `cf_my_field`"
        },
        "GRAPHQL_RELATIONSHIP_PREFIX": {
            "type": "string",
            "default": "rel",
            "description": "The prefix used for all relationship associations in GraphQL. e.g. `my_relationship` => `rel_my_relationship`"
        },
        "HTTP_PROXIES": {
            "type": "object",
            "default": null,
            "description": "A dictionary of HTTP proxies to use for outbound requests originating from Nautobot (such as when sending webhook requests).",
            "details": "Proxies should be specified by schema (HTTP and HTTPS) as per the [Python requests library documentation](https://2.python-requests.org/en/master/user/advanced/). For example:\n\n```python\nHTTP_PROXIES = {\n    'http': 'http://10.10.1.10:3128',\n    'https': 'http://10.10.1.10:1080',\n}\n```\n\n!!! note\n    When using Git repositories within Nautobot the Python library `GitPython` needs extra proxy configuration:\n\n```bash\ngit config --global http.proxy http://192.0.2.1:3128\ngit config --global https.proxy http://192.0.2.1:3128\n```"
        },
        "INSTALLATION_METRICS_ENABLED": {
            "type": "boolean",
            "default": true,
            "description": "Controls sending of anonymized installation metrics to the Nautobot maintainers.",
            "details": "When set to `True`, Nautobot will send anonymized installation metrics to the Nautobot maintainers when running the [`post_upgrade`](../tools/nautobot-server.md#post_upgrade) or [`send_installation_metrics`](../tools/nautobot-server.md#send_installation_metrics) management commands. See the documentation for the [`send_installation_metrics`](../tools/nautobot-server.md#send_installation_metrics) management command for more details.",
            "environment_variable": "NAUTOBOT_INSTALLATION_METRICS_ENABLED",
            "version_added": "1.6.0"
        },
        "INTERNAL_IPS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [
                "127.0.0.1",
                "::1"
            ],
            "description": "A list of IP addresses recognized as internal to the system, used to control the display of debugging output.",
            "details": "For example, the [Django debugging toolbar](https://django-debug-toolbar.readthedocs.io/), if installed, will be viewable only when a client is accessing Nautobot from one of the listed IP addresses (and [`DEBUG`](#debug) is true)."
        },
        "JOB_CREATE_FILE_MAX_SIZE": {
            "type": "integer",
            "default": 10485760,
            "description": "The maximum file size (in bytes) that a running Job will be allowed to create in a single call to `Job.create_file()`.",
            "details": "If you do not set a value for this setting in your `nautobot_config.py`, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value in `nautobot_config.py`, it will override any dynamically configured value.\n\n> See also: [`JOB_FILE_IO_STORAGE`](#job_file_io_storage)",
            "version_added": "2.1.0"
        },
        "JOB_FILE_IO_STORAGE": {
            "type": "string",
            "default": "db_file_storage.storage.DatabaseFileStorage",
            "description": "The backend storage engine for handling files provided as input to Jobs and files generated as output by Jobs.",
            "details": "!!! warning\n    For backwards compatibility with storage of Job inputs in prior versions of Nautobot, this currently defaults to using `DatabaseFileStorage` to store such files directly in Nautobot's database, however this is not typically the best option (see below) and may change in a future major release.\n\nIf your Nautobot server instance(s) and your Celery worker instance(s) share a common [`MEDIA_ROOT`](#media_root) filesystem (as would typically be the case in a single-server installation of Nautobot) then we recommend changing this to `\"django.core.files.storage.FileSystemStorage\"` to store Job files on the filesystem (which will place them into a `files/` subdirectory under [`MEDIA_ROOT`](#media_root)) instead of in the database.\n\n If your Nautobot server instance(s) and Celery worker instance(s) do _not_ share a common filesystem, we recommend using one of the [`django-storages`](https://django-storages.readthedocs.io/en/stable/) options such as S3 to provide a storage backend that can be accessed by the server(s) and worker(s) alike.\n\n!!! tip\n    For an example of using `django-storages` with AWS S3 buckets, visit the [django-storages with S3](../guides/s3-django-storage.md) user-guide.\n\nIf you have neither a common `MEDIA_ROOT` filesystem nor an appropriate remote storage option, then it's permissible to leave this at its default, but know that storing files in the database is provided here as a \"least-worst\" option only.\n\n!!! caution\n    It's typically safe to change this setting when initially updating to Nautobot 2.1.0 or later, as there should be no pre-existing Job output files, although any existing scheduled Jobs that have file _inputs_ may need to be deleted and recreated after doing so. However, once you've run any Jobs that output to a file, changing storage backends will of course break any existing links to Job output files in the previous storage backend. Migrating Job stored files from one backend to another is out of scope for this document.\n\n> See also: [`STORAGE_BACKEND`](#storage_backend) and [`JOB_CREATE_FILE_MAX_SIZE`](#job_create_file_max_size).",
            "environment_variable": "NAUTOBOT_JOB_FILE_IO_STORAGE",
            "version_added": "2.1.0"
        },
        "JOBS_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/jobs",
            "description": "The file path to a directory where Jobs can be discovered.",
            "details": "+/- 2.0.0\n    This directory no longer requires an `__init__.py` file.",
            "environment_variable": "NAUTOBOT_JOBS_ROOT"
        },
        "LOCATION_NAME_AS_NATURAL_KEY": {
            "type": "boolean",
            "default": false,
            "description": "`Location` names are not guaranteed globally-unique by Nautobot but in practice they often are. Set this to `True` to use the location `name` alone as the natural key for `Location` objects. Set this to `False` to use the sequence `(name, parent__name, parent__parent__name, ...)` as the natural key instead.",
            "version_added": "2.0.0"
        },
        "LOGGING": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "integer",
                    "default": 1
                },
                "disable_existing_loggers": {
                    "type": "boolean",
                    "default": false
                },
                "formatters": {
                    "type": "object",
                    "default": {
                        "normal": {
                            "format": "%(asctime)s.%(msecs)03d %(levelname)-7s %(name)s :\n  %(message)s",
                            "datefmt": "%H:%M:%S"
                        },
                        "verbose": {
                            "format": "%(asctime)s.%(msecs)03d %(levelname)-7s %(name)-20s %(filename)-15s %(funcName)30s() :\n  %(message)s",
                            "datefmt": "%H:%M:%S"
                        }
                    },
                    "additionalProperties": true
                },
                "handlers": {
                    "type": "object",
                    "default": {
                        "normal_console": {
                            "level": "INFO",
                            "class": "logging.StreamHandler",
                            "formatter": "normal"
                        },
                        "verbose_console": {
                            "level": "DEBUG",
                            "class": "logging.StreamHandler",
                            "formatter": "verbose"
                        }
                    },
                    "additionalProperties": true
                },
                "loggers": {
                    "type": "object",
                    "default": {
                        "django": {
                            "handlers": [
                                "normal_console"
                            ],
                            "level": "INFO"
                        },
                        "nautobot": {
                            "handlers": [
                                "normal_console"
                            ],
                            "level": "INFO"
                        }
                    },
                    "additionalProperties": true
                },
                "additionalProperties": true
            },
            "additionalProperties": true,
            "description": "A dictionary contains the configuration settings for logging in Nautobot."
        },
        "MAINTENANCE_MODE": {
            "type": "boolean",
            "default": false,
            "description": "Setting this to true makes Nautobot to go into maintnance mode.",
            "details": "Setting this to `True` will display a \"maintenance mode\" banner at the top of every page. Additionally, Nautobot will no longer update a user's \"last active\" time upon login. This is to allow new logins when the database is in a read-only state. Recording of login times will resume when maintenance mode is disabled.\n\n!!! note\n    The default [`SESSION_ENGINE`](#session_engine) configuration will store sessions in the database, this obviously will not work when `MAINTENANCE_MODE` is `True` and the database is in a read-only state for maintenance.  Consider setting `SESSION_ENGINE` to `django.contrib.sessions.backends.cache` when enabling `MAINTENANCE_MODE`.\n\n!!! note\n    The Docker container normally attempts to run migrations on startup; however, if the database is in a read-only state the Docker container will fail to start.  Setting the environment variable [`NAUTOBOT_DOCKER_SKIP_INIT`](../installation/docker.md#nautobot_docker_skip_init) to `true` will prevent the migrations from occurring.\n\n!!! note\n    If you are using `django-auth-ldap` for LDAP authentication, `django-auth-ldap` by default will try to update a user object on every log in.  If the database is in a read-only state `django-auth-ldap` will fail.  You will also need to set `AUTH_LDAP_ALWAYS_UPDATE_USER=False` and `AUTH_LDAP_NO_NEW_USERS=True` to avoid this, please see the [`django-auth-ldap` documentation](https://django-auth-ldap.readthedocs.io/en/stable/reference.html) for more information.",
            "environment_variable": "NAUTOBOT_MAINTENANCE_MODE"
        },
        "MAX_PAGE_SIZE": {
            "type": "integer",
            "default": 1000,
            "description": "A web user or API consumer can request an arbitrary number of objects by appending the `limit` parameter to the URL (e.g. `?limit=1000`). This parameter defines the maximum acceptable limit. Setting this to `0` or `None` will allow a client to retrieve _all_ matching objects at once with no limit by specifying `?limit=0`.",
            "details": "+++ 1.2.0\n    If you do not set a value for this setting in your `nautobot_config.py`, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in `nautobot_config.py`, it will override any dynamically configured value."
        },
        "MEDIA_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/media",
            "description": "The file path to the location where media files (such as image attachments) are stored.",
            "details": "Please see the [official Django documentation on `MEDIA_ROOT`](https://docs.djangoproject.com/en/stable/ref/settings/#media-root) for more information."
        },
        "METRICS_AUTHENTICATED": {
            "type": "boolean",
            "default": false,
            "description": "Toggle requiring authentication to view `/metrics`.",
            "details": "See the [Prometheus Metrics](../guides/prometheus-metrics.md) documentation for more details.",
            "environment_variable": "NAUTOBOT_METRICS_AUTHENTICATED",
            "version_added": "2.1.5"
        },
        "METRICS_ENABLED": {
            "type": "boolean",
            "default": false,
            "description": "Toggle the availability of Prometheus-compatible metrics at `/metrics`.",
            "details": "See the [Prometheus Metrics](../guides/prometheus-metrics.md) documentation for more details.",
            "environment_variable": "NAUTOBOT_METRICS_ENABLED"
        },
        "NAPALM_ARGS": {
            "type": "object",
            "default": {},
            "description": "A dictionary of optional arguments to pass to NAPALM when instantiating a network driver.",
            "details": "See the NAPALM documentation for a [complete list of optional arguments](https://napalm.readthedocs.io/en/latest/support/#optional-arguments). An example:\n\n```python\nNAPALM_ARGS = {\n    'api_key': '472071a93b60a1bd1fafb401d9f8ef41',\n    'port': 2222,\n}\n```\n\nSome platforms (e.g. Cisco IOS) require an enable password to be passed in addition to the normal password. If desired, you can use the configured `NAPALM_PASSWORD` as the value for this argument:\n\n```python\nNAPALM_USERNAME = 'username'\nNAPALM_PASSWORD = 'MySecretPassword'\nNAPALM_ARGS = {\n    'secret': NAPALM_PASSWORD,          # ios and nxos_ssh\n    'enable_password': NAPALM_PASSWORD, # eos\n    # Include any additional args here\n}\n```\n\n!!! note\n    If a given device has an appropriately populated [secrets group](../../platform-functionality/secret.md#secrets-groups) assigned to it, a [secret](../../platform-functionality/secret.md) defined in that group can override the `NAPALM_ARGS['secret']` or `NAPALM_ARGS['enable_password']` default value defined here."
        },
        "NAPALM_PASSWORD": {
            "type": "string",
            "default": "",
            "description": "Nautobot will use this optional credential with `lNAPALM_USERNAME` when authenticating to remote devices via the NAPALM library, if installed.",
            "details": "!!! note\n    If SSH public key authentication has been set up on the remote device(s) for the system account under which Nautobot runs, this parameter is not needed.\n\n!!! note\n    If a given device has an appropriately populated [secrets group](../../platform-functionality/secret.md#secretsgroup) assigned to it, the [secrets](../../platform-functionality/secret.md) defined in that group will take precedence over these default values.",
            "environment_variable": "NAUTOBOT_NAPALM_PASSWORD"
        },
        "NAPALM_TIMEOUT": {
            "type": "integer",
            "default": 30,
            "description": "The amount of time (in seconds) to wait for NAPALM to connect to a device.",
            "environment_variable": "NAUTOBOT_NAPALM_TIMEOUT"
        },
        "NAPALM_USERNAME": {
            "type": "string",
            "default": "",
            "description": "Nautobot will use this optional credential with `NAPALM_PASSWORD` when authenticating to remote devices via the NAPALM library, if installed.",
            "details": "!!! note\n    If SSH public key authentication has been set up on the remote device(s) for the system account under which Nautobot runs, this parameter is not needed.\n\n!!! note\n    If a given device has an appropriately populated [secrets group](../../platform-functionality/secret.md#secretsgroup) assigned to it, the [secrets](../../platform-functionality/secret.md) defined in that group will take precedence over these default values.",
            "environment_variable": "NAUTOBOT_NAPALM_USERNAME"
        },
        "NAUTOBOT_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/",
            "description": "The filesystem path to use to store Nautobot files (Jobs, uploaded images, Git repositories, etc.)."
        },
        "NETWORK_DRIVERS": {
            "type": "object",
            "default": {},
            "description": "An optional dictionary to extend or override the default Platform.network_driver translations provided by netutils."
        },
        "PAGINATE_COUNT": {
            "type": "integer",
            "default": 50,
            "description": "The default maximum number of objects to display per page within each list of objects. Applies to both the UI and the REST API."
        },
        "PER_PAGE_DEFAULTS": {
            "type": "array",
            "items": {
                "type": "integer"
            },
            "default": [
                25,
                50,
                100,
                250,
                500,
                1000
            ],
            "description": "The options displayed in the web interface dropdown to limit the number of objects per page."
        },
        "PLUGINS": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "description": "A list of installed Nautobot plugins to enable."
        },
        "PLUGINS_CONFIG": {
            "type": "object",
            "default": {},
            "description": "This parameter holds configuration settings for individual Nautobot plugins."
        },
        "PREFER_IPV4": {
            "type": "boolean",
            "default": false,
            "description": "When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to prefer IPv4 instead."
        },
        "RACK_ELEVATION_DEFAULT_UNIT_HEIGHT": {
            "type": "integer",
            "default": 22,
            "description": "Default height (in pixels) of a unit within a rack elevation."
        },
        "RACK_ELEVATION_DEFAULT_UNIT_WIDTH": {
            "type": "integer",
            "default": 220,
            "description": "Default width (in pixels) of a unit within a rack elevation."
        },
        "REDIS_LOCK_TIMEOUT": {
            "type": "integer",
            "default": 600,
            "description": "Maximum duration of a Redis lock created when calling /api/ipam/prefixes/{id}/available-prefixes/ or /api/ipam/prefixes/{id}/available-ips/ to avoid inadvertently allocating the same prefix or IP to multiple simultaneous callers."
        },
        "RELEASE_CHECK_TIMEOUT": {
            "type": "integer",
            "default": 86400,
            "description": "The number of seconds to retain the latest version that is fetched from the GitHub API before automatically invalidating it and fetching it from the API again."
        },
        "RELEASE_CHECK_URL": {
            "type": "string",
            "format": "uri",
            "default": "",
            "description": "This parameter defines the URL of the repository that will be checked periodically for new Nautobot releases."
        },
        "SANITIZER_PATTERNS": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/regex"
            },
            "default": [],
            "description": "List of (regular expression, replacement pattern) tuples used by the nautobot.core.utils.logging.sanitize() function."
        },
        "SECRET_KEY": {
            "type": "string",
            "default": "",
            "description": "This is a secret, random string used to assist in the creation new cryptographic hashes for passwords and HTTP cookies."
        },
        "SESSION_CACHE_ALIAS": {
            "type": "string",
            "default": "",
            "description": "The Alias for the sessions cache defined in CACHES, used in Nautobot Version Control App."
        },
        "SESSION_COOKIE_AGE": {
            "type": "integer",
            "default": 1209600,
            "description": "The age of session cookies, in seconds."
        },
        "SESSION_ENGINE": {
            "type": "string",
            "default": "django.contrib.sessions.backends.db",
            "description": "Controls where Nautobot stores session data."
        },
        "SESSION_EXPIRE_AT_BROWSER_CLOSE": {
            "type": "boolean",
            "default": false,
            "description": "If this is set to True, Nautobot will use browser-length cookies - cookies that expire as soon as the user closes their browser."
        },
        "SESSION_FILE_PATH": {
            "$ref": "#/definitions/relative_path",
            "default": "",
            "description": "A local file path may be specified here and Nautobot will store session data as files instead of using the database."
        },
        "SHORT_DATE_FORMAT": {
            "type": "string",
            "default": "Y-m-d",
            "description": "Custom short format for dates. The default results in strings like \"2024-01-22\".",
            "details": "For detailed instructions on writing format strings, please see [the Django documentation](https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date).",
            "environment_variable": "NAUTOBOT_SHORT_DATE_FORMAT"
        },
        "SHORT_DATETIME_FORMAT": {
            "type": "string",
            "default": "Y-m-d H:i",
            "description": "Custom short format for date-times. The default results in strings like \"2024-01-22 13:23\".",
            "details": "For detailed instructions on writing format strings, please see [the Django documentation](https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date).",
            "environment_variable": "NAUTOBOT_SHORT_DATETIME_FORMAT"
        },
        "STATIC_ROOT": {
            "$ref": "#/definitions/absolute_path",
            "default": "~/.nautobot/static",
            "description": "The location where static files (such as CSS, JavaScript, fonts, or images) used to serve the web interface will be staged by the nautobot-server collectstatic command."
        },
        "STORAGE_BACKEND": {
            "type": "string",
            "default": "",
            "description": "The backend storage engine for handling uploaded files (e.g. image attachments)."
        },
        "STORAGE_CONFIG": {
            "type": "object",
            "default": {},
            "description": "A dictionary of configuration parameters for the storage backend configured as STORAGE_BACKEND."
        },
        "STRICT_FILTERING": {
            "type": "boolean",
            "default": true,
            "description": "If set to True (default), UI and REST API filtering of object lists will fail if an unknown/unrecognized filter parameter is provided as a URL parameter."
        },
        "SUPPORT_MESSAGE": {
            "type": "string",
            "default": "",
            "description": "A message to include on error pages (status code 403, 404, 500, etc.) when an error occurs."
        },
        "TEST_FACTORY_SEED": {
            "type": "string",
            "default": "",
            "description": "This configuration provides a fixed seed string for the pseudo-random generator used to populate test data into the database, providing for reproducible randomness across consecutive test runs."
        },
        "TEST_PERFORMANCE_BASELINE_FILE": {
            "type": "string",
            "default": "nautobot/core/tests/performance_baselines.yml",
            "description": "TEST_PERFORMANCE_BASELINE_FILE is set to a certain file path, this file path should point to a .yml file."
        },
        "TEST_USE_FACTORIES": {
            "type": "boolean",
            "default": false,
            "description": "If set to True, the Nautobot test runner will call nautobot-server generate_test_data ... before executing any test cases, pre-populating the test database with various pseudo-random instances of many of Nautobot's data models."
        },
        "TIME_FORMAT": {
            "type": "string",
            "default": "g:i a",
            "description": "Custom format for times. The default results in strings like \"1:23 p.m.\".",
            "details": "For detailed instructions on writing format strings, please see [the Django documentation](https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date).",
            "environment_variable": "NAUTOBOT_TIME_FORMAT"
        },
        "TIME_ZONE": {
            "type": "string",
            "default": "UTC"
        },
        "UI_RACK_VIEW_TRUNCATE_FUNCTION": {
            "$ref": "#/definitions/callable",
            "default": "UI_RACK_VIEW_TRUNCATE_FUNCTION",
            "description": "This setting function is used to perform the rack elevation truncation feature."
        }
    }
}
