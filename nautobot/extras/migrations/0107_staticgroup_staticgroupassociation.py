# Generated by Django 3.2.25 on 2024-04-23 20:00

import uuid

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion

import nautobot.core.models.fields
import nautobot.extras.models.groups
import nautobot.extras.models.mixins
import nautobot.extras.utils


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("extras", "0106_populate_default_statuses_and_roles_for_contact_associations"),
        ("tenancy", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="StaticGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                (
                    "content_type",
                    models.ForeignKey(
                        limit_choices_to=nautobot.extras.utils.FeatureQuery("static_groups"),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="static_groups_set",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="managed_static_groups",
                        to="tenancy.tenant",
                    ),
                ),
                (
                    "hidden",
                    models.BooleanField(db_index=True, default=False),
                ),
                (
                    "_dynamic_group",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="_backing_group",
                        to="extras.dynamicgroup",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ["name"],
            },
            managers=[
                ("objects", nautobot.extras.models.groups.StaticGroupDefaultManager()),
                ("all_objects", nautobot.extras.models.groups.StaticGroupManager()),
            ],
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="StaticGroupAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("associated_object_id", models.UUIDField(db_index=True)),
                (
                    "associated_object_type",
                    models.ForeignKey(
                        limit_choices_to=nautobot.extras.utils.FeatureQuery("static_groups"),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="static_group_associations",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "static_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="static_group_associations",
                        to="extras.staticgroup",
                    ),
                ),
            ],
            options={
                "ordering": ["static_group", "associated_object_type", "associated_object_id"],
                "unique_together": {("static_group", "associated_object_type", "associated_object_id")},
                "indexes": [
                    models.Index(
                        name="extras_sga_double",
                        fields=["static_group", "associated_object_id"],
                    ),
                    models.Index(
                        name="extras_sga_associated_object",
                        fields=["associated_object_type_id", "associated_object_id"],
                    ),
                ],
            },
            managers=[
                ("objects", nautobot.extras.models.groups.StaticGroupAssociationDefaultManager()),
                ("all_objects", nautobot.extras.models.groups.StaticGroupAssociationManager()),
            ],
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
    ]
