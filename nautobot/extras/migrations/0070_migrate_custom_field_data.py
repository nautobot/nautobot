# Generated by Django 3.2.18 on 2023-03-17 17:25

from django.db import migrations
from nautobot.core.models.fields import slugify_dashes_to_underscores


def generate_unique_custom_field_slug_and_migrate_custom_field_data(apps, schema_editor):
    CustomField = apps.get_model("extras", "customfield")
    ContentType = apps.get_model("contenttypes", "ContentType")

    # Make sure that the key is unique during migration
    cf_keys = []
    for custom_field in CustomField.objects.all().order_by("created"):
        original_cf_key = custom_field.key
        cf_key = original_cf_key
        append_counter = 2
        while cf_key in cf_keys:
            cf_key_append = f"_{append_counter}"
            max_key_length = 50 - len(cf_key_append)
            cf_key = original_cf_key[:max_key_length] + cf_key_append
            append_counter += 1
        if cf_key != original_cf_key:
            print(
                f'  CustomField Class "{CustomField.key}" key "{original_cf_key}" is not unique, changing to "{cf_key}".'
            )
            custom_field.key = slugify_dashes_to_underscores(cf_key)
            custom_field.save()
        cf_keys.append(custom_field.key)

    # Move name to labels
    # Filtering on null or empty labels
    custom_fields = CustomField.objects.filter(label__isnull=True).union(CustomField.objects.filter(label__exact=""))

    for cf in custom_fields:
        cf.label = cf.name
        cf.save()
    # Migrate CustomFieldModel's _custom_field_data
    custom_fields = CustomField.objects.all()
    for cf in custom_fields:
        # Migrate CustomFieldModel's _custom_field_data
        content_type_pk_set = cf.content_types.all().values_list("pk", flat=True)
        for ct in ContentType.objects.filter(pk__in=content_type_pk_set):
            model = apps.get_model(ct.app_label, ct.model)
            for obj in model.objects.all():
                # Create a new key value pair
                obj._custom_field_data.setdefault(cf.key, obj._custom_field_data.get(cf.name, cf.default))
                # Pop the old `cf.name` key
                obj._custom_field_data.pop(cf.name, None)
                obj.save()


class Migration(migrations.Migration):
    dependencies = [
        ("dcim", "0030_migrate_region_and_site_data_to_locations"),
        ("extras", "0069_rename_slug_to_key_for_custom_field"),
        ("ipam", "0022_aggregate_to_prefix_data_migration"),
    ]

    operations = [
        migrations.RunPython(
            code=generate_unique_custom_field_slug_and_migrate_custom_field_data,
            reverse_code=migrations.operations.special.RunPython.noop,
        )
    ]
